Globals:

1)

/*
 * Configuration:
 *   share_irqs - whether we pass IRQF_SHARED to request_irq().  This option
 *                is unsafe when used on edge-triggered interrupts.
 */
static unsigned int share_irqs = SERIAL8250_SHARE_IRQS;

From header file:
#ifdef CONFIG_SERIAL_8250_SHARE_IRQ
#define SERIAL8250_SHARE_IRQS 1
#else
#define SERIAL8250_SHARE_IRQS 0
#endif

2)
static unsigned int nr_uarts = CONFIG_SERIAL_8250_RUNTIME_UARTS;


3)
#define UART_NR CONFIG_SERIAL_8250_NR_UARTS


4)
#define ALPHA_KLUDGE_MCR  (UART_MCR_OUT2 | UART_MCR_OUT1)

5)
static struct uart_8250_port serial8250_ports[UART_NR];

6)
static const struct uart_ops *base_ops;
static struct uart_ops univ8250_port_ops;

7)
static const struct uart_8250_ops univ8250_driver_ops = {
        .setup_irq      = univ8250_setup_irq,
        .release_irq    = univ8250_release_irq,
};

8)
static struct uart_driver serial8250_reg; ---> IMPORTANT - Driver structure

static struct uart_driver serial8250_reg = {
        .owner                  = THIS_MODULE,
        .driver_name            = "serial",
        .dev_name               = "ttyS",
        .major                  = TTY_MAJOR,
        .minor                  = 64,
        .cons                   = SERIAL8250_CONSOLE,
};


9)
PLAT8250_DEV_LEGACY = -1 (enum from serial_8250.h)


10)
static struct platform_driver serial8250_isa_driver = {
        .probe          = serial8250_probe,
        .remove         = serial8250_remove,
        .suspend        = serial8250_suspend,
        .resume         = serial8250_resume,
        .driver         = {
                .name   = "serial8250",
        },
};


11)
/*
 * This "device" covers _all_ ISA 8250-compatible serial devices listed
 * in the table in include/asm/serial.h
 */
static struct platform_device *serial8250_isa_devs;



ers the functions
Init function:
serial8250_init(){
  if(nr_uarts==0)
    return -ENODEV;

  serial8250_isa_init_ports();  //Fills "struct uart_port" details

  //prints to console that 8250/16550 driver,ports,irq sharing etc.
  //Sample from machine:
  //[    0.423031] Serial: 8250/16550 driver, 32 ports, IRQ sharing enabled


  serial8250_reg.nr = UART_NR;

  //register the driver
  ret = uart_register_driver(&serial8250_reg);

  serial8250_pnp_init(); //defined in 8250_pnp.c. Depends on CONFIG_SERIAL_8250_PNP

  serial8250_isa_devs=platform_device_alloc("serial8250", PLAT8250_DEV_LEGACY);

  platform_device_add(serial8250_isa_devs);

  serial8250_register_ports(&serial8250_reg, &serial8250_isa_devs->dev); //for each port, port.dev=&serial8250_isa_devs->dev and adds the port;

  platform_driver_register(&serial8250_isa_driver);//registers the functions like probe, remove, suspend etc

}



global:

1)
/*
 * SERIAL_PORT_DFNS tells us about built-in ports that have no
 * standard enumeration mechanism.   Platforms that can find all
 * serial ports via mechanisms like ACPI or PCI need not supply it.
 */
#ifndef SERIAL_PORT_DFNS
#define SERIAL_PORT_DFNS
#endif

static const struct old_serial_port old_serial_port[] = {
        SERIAL_PORT_DFNS /* defined in asm/serial.h */
};


2)
static struct uart_8250_port serial8250_ports[UART_NR];


__init serial8250_isa_init_ports(){
  nr_uarts = UART_NR;

  //Here each port is initialized and operations are assigned.
  for(i=0; i< nr_uarts; i++){
    struct uart_8250_port *up = &serial8250_ports[i];
    struct uart_port *port = &up->port;

    port->line = i;               //Assign line number
    serial8250_init_port(up);     //Initialize the port. Defined in 8250_port.c

    base_ops = port->ops;
    port->ops = &univ8250_port_ops;

    timer_setup(&up->timer, serial8250_timeout, 0); //serial8250_timeout is the callback functions, flags=0

    up->ops = &univ8250_driver_ops;

    serial8250_set_defaults(up);  //Defined in 8250_port.c
  }

  if (share_irqs)
        irqflag = IRQF_SHARED;

  //for each port is seraial8250_ports array of struct uart_8250_port,
  //assign values to members of struct uart_port based on old_serial_port
  //values

  for (i = 0, up = serial8250_ports;
     i < ARRAY_SIZE(old_serial_port) && i < nr_uarts;
     i++, up++) {
     ...
     }
}



globals:

struct platform_device {
	const char	*name;
	int		id;
	bool		id_auto;
	struct device	dev;



/*
 * Register a set of serial devices attached to a platform device.  The
 * list is terminated with a zero flags entry, which means we expect
 * all entries to have at least UPF_BOOT_AUTOCONF set.
 */
static int serial8250_probe(struct platform_device *dev)
{
    struct plat_serial8250_port *p = dev_get_platdata(&dev->dev);
    struct uart_8250_port uart;

    memset(&uart, 0, sizeof(uart));

    if (share_irqs)
            irqflag = IRQF_SHARED;

    for(i=0; p && p->flags!=0; p++, i++){
      uart.port.iobase        = p->iobase;
      uart.port.membase       = p->membase;
      uart.port.irq           = p->irq;
      uart.port.irqflags      = p->irqflags;
      uart.port.uartclk       = p->uartclk;
      uart.port.regshift      = p->regshift;
      uart.port.iotype        = p->iotype;
      uart.port.flags         = p->flags;
      uart.port.mapbase       = p->mapbase;
      uart.port.hub6          = p->hub6;
      uart.port.has_sysrq     = p->has_sysrq;
      uart.port.private_data  = p->private_data;
      uart.port.type          = p->type;
      uart.port.serial_in     = p->serial_in;
      uart.port.serial_out    = p->serial_out;
      uart.port.handle_irq    = p->handle_irq;
      uart.port.handle_break  = p->handle_break;
      uart.port.set_termios   = p->set_termios;
      uart.port.set_ldisc     = p->set_ldisc;
      uart.port.get_mctrl     = p->get_mctrl;
      uart.port.pm            = p->pm;
      uart.port.dev           = &dev->dev;
      uart.port.irqflags      |= irqflag;
      ret = serial8250_register_8250_port(&uart);
    }
    //error checking
    return 0;
}
