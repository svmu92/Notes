REF - https://github.com/ziishaned/learn-regex/blob/master/README.md

Meta characters
---------------

. 	-	Period matches any single character except a line break.

[ ]	-	Character class. Matches any character contained between the square brackets.

[^ ]	-	Negated character class. Matches any character that is not contained between the square brackets

*	-	Matches 0 or more repetitions of the preceding symbol.

+	-	Matches 1 or more repetitions of the preceding symbol.

?	-	Makes the preceding symbol optional.

{n,m}	-	Braces. Matches at least "n" but not more than "m" repetitions of the preceding symbol.

(xyz)	-	Character group. Matches the characters xyz in that exact order.

|	-	Alternation. Matches either the characters before or the characters after the symbol.

\	-	Escapes the next character. This allows you to match reserved characters [ ] ( ) { } . * + ? ^ $ \ |

^	-	Matches the beginning of the input.

$	-	Matches the end of the input. 



- For example, the regular expression ".ar" means: any character, followed by the letter a, followed by the letter r.

- For example, the regular expression [Tt]he means: an uppercase T or lowercase t, followed by the letter h, followed by the letter e.
	Use a hyphen inside a character set to specify the characters' range. The order of the character range inside the square brackets doesn't matter.
	
- A period inside a character set, however, means a literal period. The regular expression ar[.] means: a lowercase character a, followed by the letter r, followed by a period . character.

- In general, the caret symbol represents the start of the string, but when it is typed after the opening square bracket it negates the character set. For example, the regular expression [^c]ar means: any character except c, followed by the character a, followed by the letter r.


- The meta characters "+", "*" or "?" are used to specify how many times a subpattern can occur. These meta characters act differently in different situations.


- The "*" symbol matches zero or more repetitions of the preceding matcher. The regular expression "a*" means: zero or more repetitions of the preceding lowercase character "a". But if it appears after a character set or class then it finds the repetitions of the whole character set. For example, the regular expression "[a-z]*" means: any number of lowercase letters in a row.

- The "*" symbol can be used with the meta character "." to match any string of characters ".*". 

- The "*" symbol can be used with the whitespace character "\s" to match a string of whitespace characters. For example, the expression "\s*cat\s*" means: zero or more spaces, followed by a lowercase c, followed by a lowercase a, followed by a lowercase t, followed by zero or more spaces.



- The "+" symbol matches one or more repetitions of the preceding character. For example, the regular expression "c.+t" means: a lowercase c, followed by at least one character, followed by a lowercase t. It needs to be clarified thatt is the last t in the sentence.


- In regular expressions, the meta character "?" makes the preceding character optional. This symbol matches zero or one instance of the preceding character. For example, the regular expression "[T]?he" means: Optional uppercase T, followed by a lowercase h, followed by a lowercase e.


- In regular expressions, braces (also called quantifiers) are used to specify the number of times that a character or a group of characters can be repeated. For example, the regular expression [0-9]{2,3} means: Match at least 2 digits, but not more than 3, ranging from 0 to 9.




- A capturing group is a group of subpatterns that is written inside parentheses (...). For example, the regular expression "(ab)*" matches zero or more repetitions of the character "ab". We can also use the alternation | meta character inside a capturing group. For example, the regular expression "(c|g|p)ar" means: a lowercase c, g or p, followed by a, followed by r.


- A non-capturing group is a capturing group that matches the characters but does not capture the group. A non-capturing group is denoted by a ? followed by a : within parentheses (...). For example, the regular expression "(?:c|g|p)ar" is similar to (c|g|p)ar in that it matches the same characters but will not create a capture group.

- Non-capturing groups can come in handy when used in find-and-replace functionality or when mixed with capturing groups to keep the overview when producing any other kind of output. 



- In a regular expression, the vertical bar | is used to define alternation. Alternation is like an OR statement between multiple expressions.
For example, the regular expression "(T|t)he|car" means: either (an uppercase T or a lowercase t, followed by a lowercase h, followed by a lowercase e) OR (a lowercase c, followed by a lowercase a, followed by a lowercase r). 



- A backslash \ is used in regular expressions to escape the next character. This allows us to include reserved characters such as { } [ ] / \ + * . $ ^ | ? as matching characters. To use one of these special character as a matching character, prepend it with \.

- For example, the regular expression . is used to match any character except a newline. Now, to match . in an input string, the regular expression "(f|c|m)at\.?" means: a lowercase f, c or m, followed by a lowercase a, followed by a lowercase t, followed by an optional . character.




- In regular expressions, we use anchors to check if the matching symbol is the starting symbol or ending symbol of the input string. Anchors are of two types: The first type is the caret ^ that checks if the matching character is the first character of the input and the second type is the dollar sign $ which checks if a matching character is the last character of the input string.

- The caret symbol ^ is used to check if a matching character is the first character of the input string. For example, expression "^(T|t)he" which means: an uppercase T or a lowercase t must be the first character in the string, followed by a lowercase h, followed by a lowercase e.

- The dollar sign $ is used to check if a matching character is the last character in the string. For example, the regular expression "(at\.)$" means: a lowercase a, followed by a lowercase t, followed by a . character and the matcher must be at the end of the string.





- There are a number of convenient shorthands for commonly used character sets/ regular expressions:

Shorthand	Description
.		Any character except new line
\w		Matches alphanumeric characters: [a-zA-Z0-9_]
\W		Matches non-alphanumeric characters: [^\w]
\d		Matches digits: [0-9]
\D		Matches non-digits: [^\d]
\s		Matches whitespace characters: [\t\n\f\r\p{Z}]
\S		Matches non-whitespace characters: [^\s]




- Lookbehinds and lookaheads (also called lookarounds) are specific types of non-capturing groups (used to match a pattern but without including it in the matching list). 


- Lookarounds are used when a pattern must be preceded or followed by another pattern. For example, imagine we want to get all numbers that are preceded by the $ character from the string $4.44 and $10.88. We will use the following regular expression "(?<=\$)[0-9\.]*" which means: get all the numbers which contain the . character and are preceded by the $ character.


- These are the lookarounds that are used in regular expressions:

Symbol	Description
?=	Positive Lookahead
?!	Negative Lookahead
?<=	Positive Lookbehind
?<!	Negative Lookbehind


- The positive lookahead asserts that the first part of the expression must be followed by the lookahead expression. The returned match only contains the text that is matched by the first part of the expression. To define a positive lookahead, parentheses are used. Within those parentheses, a question mark with an equals sign is used like this: (?=...). The lookahead expressions is written after the equals sign inside parentheses. 

- For example, the regular expression "(T|t)he(?=\sfat)" means: match either a lowercase t or an uppercase T, followed by the letter h, followed by the letter e. In parentheses we define a positive lookahead which tells the regular expression engine to match The or the only if it's followed by the word fat.



- Negative lookaheads are used when we need to get all matches from an input string that are not followed by a certain pattern. We use an exclamation mark ! to indicate negation i.e. (?!...). 

- For example, the following regular expression "(T|t)he(?!\sfat)" which means: get all The or the words from the input string that are not followed by a space character and the word fat.



- Positive lookbehinds are used to get all the matches that are preceded by a specific pattern. Positive lookbehinds are written (?<=...). 

- For example, the regular expression "(?<=(T|t)he\s)(fat|mat)" means: get all fat or mat words from the input string that come after the word The or the.



- Negative lookbehinds are used to get all the matches that are not preceded by a specific pattern. Negative lookbehinds are written (?<!...). 
- For example, the regular expression "(?<!(T|t)he\s)(cat)" means: get all cat words from the input string that are not after the word The or the.





- Flags are also called modifiers because they modify the output of a regular expression. These flags can be used in any order or combination, and are an integral part of the RegExp.

Flag	Description
----	-----------
i	Case insensitive: Match will be case-insensitive.
g	Global Search: Match all instances, not just the first.
m	Multiline: Anchor meta characters work on each line.


- The i modifier is used to perform case-insensitive matching. For example, the regular expression "/The/gi" means: an uppercase T, followed by a lowercase h, followed by an e. And at the end of regular expression the i flag tells the regular expression engine to ignore the case. As you can see, we also provided g flag because we want to search for the pattern in the whole input string.

- The g modifier is used to perform a global match (finds all matches rather than stopping after the first match). For example, the regular expression "/.(at)/g" means: any character except a new line, followed by a lowercase a, followed by a lowercase t. Because we provided the g flag at the end of the regular expression, it will now find all matches in the input string, not just the first one (which is the default behavior).

- The m modifier is used to perform a multi-line match. If we want the anchors to work on each line, we use the m flag. For example, the regular expression "/at(.)?$/gm" means: a lowercase a, followed by a lowercase t and, optionally, anything except a new line. And because of the m flag, the regular expression engine now matches patterns at the end of each line in a string.




- By default, a regex will perform a greedy match, which means the match will be as long as possible. We can use ? to match in a lazy way, which means the match should be as short as possible.

