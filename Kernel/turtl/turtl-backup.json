{
  "boards": [
    {
      "body": null,
      "id": "016edaa4a04a04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b71000c",
      "keys": [],
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "title": "Bookmarks",
      "user_id": 25998
    },
    {
      "body": null,
      "id": "016edaa4a44b04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b71000e",
      "keys": [],
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "title": "Photos",
      "user_id": 25998
    },
    {
      "body": null,
      "id": "016edaa4aa3f04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710010",
      "keys": [],
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "title": "Passwords",
      "user_id": 25998
    }
  ],
  "files": [],
  "notes": [
    {
      "board_id": null,
      "body": "",
      "file": {
        "body": "AAYBAAyaxJTaOfs45vE32GYUOz5fcsExvOu7qJNfX8OSjfs="
      },
      "has_file": false,
      "id": "016edaa8552404b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710019",
      "keys": [
        {
          "k": "AAYBAAzTd+N9eZER79Xz07ijoLo6vzuRmzaj+7s2BEN2nGO8OCB9vKi+CVQ94zYSFd2CV/ZjxBTALLGtO8AMAJc=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575633770,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "Text Notes\n\n#Modules\nLinux kernel code, including driver code, must be reentrant—it must be\ncapable of running in more than one context at the same time. Data structures must\nbe carefully designed to keep multiple threads of execution separate, and the code\nmust take care to access shared data in ways that prevent corruption of the data.\n\n\nKernel code can\nrefer to the current process by accessing the global item current , defined in <asm/\ncurrent.h>, which yields a pointer to struct task_struct , defined by <linux/sched.h>.\nThe current pointer refers to the process that is currently executing. During the exe-\ncution of a system call, such as open or read, the current process is the one that\ninvoked the call. Kernel code can use process-specific information by using current ,\nif it needs to do so.\n\na device\ndriver can just include <linux/sched.h> and refer to the current process.\n\nthe following statement prints the process ID and the command name of the current\nprocess by accessing certain fields in struct task_struct :\n\n`printk(KERN_INFO \"The process is \\\"%s\\\" (pid %i)\\n\",current->comm, current->pid);`\n\nThe command name stored in current->comm is the base name of the program file\n(trimmed to 15 characters if need be) that is being executed by the current process.\n\n\n\n\nApplications are laid out in virtual memory with a very large stack area. The stack, of\ncourse, is used to hold the function call history and all automatic variables created by\ncurrently active functions. The kernel, instead, has a very small stack; it can be as\nsmall as a single, 4096-byte page. Your functions must share that stack with the\nentire kernel-space call chain. Thus, it is never a good idea to declare large auto-\nmatic variables; if you need larger structures, you should allocate them dynamically\nat call time.\n\n\n\nthe kernel API, you will encounter function names starting with\na double underscore ( __ ). Functions so marked are generally a low-level component\nof the interface and should be used with caution.\n\nKernel code cannot do floating point arithmetic. Enabling floating point would\nrequire that the kernel save and restore the floating point processor’s state on each\nentry to, and exit from, kernel space—at least, on some architectures.\n\n\n##Compiling Modules\n`obj-m := hello.o`\nor\n`obj-m := module.o`\n`module-objs := file1.o file2.o`\n\n`make -C ~/kernel-2.6 M=`pwd` modules`\n\nThis command starts by changing its directory to the one provided with the -C\noption (that is, your kernel source directory). There it finds the kernel’s top-level\nmakefile. The M= option causes that makefile to move back into your module source\ndirectory before trying to build the modules target. This target, in turn, refers to the list\nof modules found in the obj-m variable, which we’ve set to module.o in our examples.\n\n\nour makefile as follows:\n```C\n# If KERNELRELEASE is defined, we've been invoked from the\n# kernel build system and can use its language.\nifneq ($(KERNELRELEASE),)\nobj-m := hello.o\n# Otherwise we were called directly from the command\n# line; invoke the kernel build system.\nelse\nKERNELDIR ?= /lib/modules/$(shell uname -r)/build\nPWD := $(shell pwd)\ndefault:\n$(MAKE) -C $(KERNELDIR) M=$(PWD) modules\nendif\n```\n\n\nIf you are not actually run-\nning the kernel that you are building for, you can supply a KERNELDIR= option on the\ncommand line, set the KERNELDIR environment variable, or rewrite the line that sets\nKERNELDIR in the makefile. Once the kernel source tree has been found, the makefile\ninvokes the default: target, which runs a second make command (parameterized in\nthe makefile as $(MAKE) ) to invoke the kernel build system as described previously.\nOn the second reading, the makefile sets obj-m , and the kernel makefiles take care of\nactually building the module.\n\n##insmod\nThe program loads the module code and\ndata into the kernel, which, in turn, performs a function similar to that of ld, in that\nit links any unresolved symbol in the module to the symbol table of the kernel.\nUnlike the linker, however, the kernel doesn’t modify the module’s disk file, but\nrather an in-memory copy. insmod accepts a number of command-line options (for\ndetails, see the manpage), and it can assign values to parameters in your module\nbefore linking it to the current kernel. Thus, if a module is correctly designed, it can\nbe configured at load time.\n\nit relies on a\nsystem call defined in kernel/module.c. The function sys_init_module allocates kernel\nmemory to hold a module - this memory is allocated with vmalloc - \nit then copies the module text into that mem-\nory region, resolves kernel references in the module via the kernel symbol table, and\ncalls the module’s initialization function to get everything going.\n\n\n\n##modprobe\n\nThe modprobe utility is worth a quick mention. modprobe, like insmod, loads a mod-\nule into the kernel. It differs in that it will look at the module to be loaded to see\nwhether it references any symbols that are not currently defined in the kernel. If any\nsuch references are found, modprobe looks for other modules in the current module\nsearch path that define the relevant symbols. When modprobe finds those modules\n(which are needed by the module being loaded), it loads them into the kernel as well.\nIf you use insmod in this situation instead, the command fails with an “unresolved\nsymbols” message left in the system logfile.\n\n\n\n##lsmod\nThe lsmod program produces a list of the modules currently loaded in the kernel.\nSome other information, such as any other modules making use of a specific mod-\nule, is also provided. lsmod works by reading the /proc/modules virtual file. Informa-\ntion on currently loaded modules can also be found in the sysfs virtual filesystem\nunder /sys/module\n\n\nq) why module compiled for one kernel version will not work for another kernel version?\nAns: Modules are strongly tied\nto the data structures and function prototypes defined in a particular kernel version;\nthe interface seen by a module can change significantly from one kernel version to\nthe next. This is especially true of development kernels, of course.\n\nOne of the steps in the build process is to link your module\nagainst a file (called vermagic.o) from the current kernel tree; this object contains a\nfair amount of information about the kernel the module was built for, including the\ntarget kernel version, compiler version, and the settings of a number of important\nconfiguration variables. When an attempt is made to load a module, this informa-\ntion can be tested for compatibility with the running kernel. If things don’t match,\nthe module is not loaded; instead, you see something like:\n```\n# insmod hello.ko\nError inserting './hello.ko': -1 Invalid module format\n```\n\nA look in the system log file /var/log/messages will reveal the specific problem that caused the module to fail to load.\n\nIf you need to compile a module for a specific kernel version, you will need to use the\nbuild system and source tree for that particular version. A simple change to the\nKERNELDIR variable in the example makefile shown previously does the trick.\n\n\ndefinitions found in linux/version.h. This header file, automatically\nincluded by linux/module.h, defines the following macros:\n\n-UTS_RELEASE\nThis macro expands to a string describing the version of this kernel tree. For\nexample, \"2.6.10\" .\n-LINUX_VERSION_CODE\nThis macro expands to the binary representation of the kernel version, one byte\nfor each part of the version release number. For example, the code for 2.6.10 is\n132618 (i.e., 0x02060a). * With this information, you can (almost) easily deter-\nmine what version of the kernel you are dealing with.\n-KERNEL_VERSION(major,minor,release)\nThis is the macro used to build an integer version code from the individual num-\nbers that build up a version number. For example, KERNEL_VERSION(2,6,10)\nexpands to 132618. This macro is very useful when you need to compare the\ncurrent version and a known checkpoint.\n\n\n\n##Module Stacking\nNew modules can use symbols exported by your module, and you can stack new\nmodules on top of other modules. Module stacking is implemented in the main-\nstream kernel sources as well: the msdos filesystem relies on symbols exported by the\nfat module, and each input USB device module stacks on the usbcore and input modules.\n\n\nIf your module needs to export symbols for other modules to\nuse, the following macros should be used.\nEXPORT_SYMBOL(name);\nEXPORT_SYMBOL_GPL(name);\n\nSymbols must be exported in the global part of the module’s file, outside of any func-\ntion, because the macros expand to the declaration of a special-purpose variable that\nis expected to be accessible globally. This variable is stored in a special part of the\nmodule executible (an “ELF section”) that is used by the kernel at load time to find\nthe variables exported by the module.\n\njust about all module code has the following:\n```C\n#include <linux/module.h>\n#include <linux/init.h>\n```\nmodule.h contains a great many definitions of symbols and functions needed by load-\nable modules. You need init.h to specify your initialization and cleanup functions.\nMost modules also include moduleparam.h to enable the passing of parameters\nto the module at load time\n\nyour module really should specify which license\napplies to its code. Doing so is just a matter of including a MODULE_LICENSE line:\n\n`MODULE_LICENSE(\"GPL\");`\n\nOther descriptive definitions that can be contained within a module include\n__MODULE_AUTHOR__ (stating who wrote the module), \n__MODULE_DESCRIPTION__ (a human-read-\nable statement of what the module does), \n__MODULE_VERSION__ (for a code revision number; see the comments in <linux/module.h> for the conventions to use in creatingversion strings), \n__MODULE_ALIAS__ (another name by which this module can be known),\nand \n__MODULE_DEVICE_TABLE__ (to tell user space about which devices the module sup-\nports).\n\n##Initialization\n```C\nstatic int __init initialization_function(void)\n{\n/* Initialization code here */\n}\nmodule_init(initialization_function);\n```\n\nThe __init token in the\ndefinition may look a little strange; it is a hint to the kernel that the given function is\nused only at initialization time. The module loader drops the initialization function\nafter the module is loaded, making its memory available for other uses. There is\na similar tag ( __initdata ) for data used only during initialization. Use of __init and\n__initdata is optional, but it is worth the trouble.\n\n__devinit and __devinitdata in the kernel source; these trans-\nlate to __init and __initdata only if the kernel has not been configured for hotplug-\ngable devices.\n\n\nThe use of module_init is mandatory. This macro adds a special section to the mod-\nule’s object code stating where the module’s initialization function is to be found.\nWithout this definition, your initialization function is never called.\n\nModules can register many different types of facilities, including different kinds of\ndevices, filesystems, cryptographic transforms, and more. For each facility, there is a\nspecific kernel function that accomplishes this registration. The arguments passed to\nthe kernel registration functions are usually pointers to data structures describing the\nnew facility and the name of the facility being registered. The data structure usually\ncontains pointers to module functions, which is how functions in the module body\nget called.\n\nMost registration functions are prefixed with\nregister_ , so another possible way to find them is to grep for register_ in the ker-\nnel source.\n\n\n##Cleanup\n\nEvery nontrivial module also requires a cleanup function, which unregisters inter-\nfaces and returns all resources to the system before the module is removed. This\nfunction is defined as:\n```C\nstatic void __exit cleanup_function(void)\n{\n/* Cleanup code here */\n}\nmodule_exit(cleanup_function);\n```\nThe cleanup function has no value to return, so it is declared void . The __exit modi-\nfier marks the code as being for module unload only (by causing the compiler to\nplace it in a special ELF section). If your module is built directly into the kernel,\nor if your kernel is configured to disallow the unloading of modules, functions\nmarked __exit are simply discarded. For this reason, a function marked __exit can\nbe called only at module unload or system shutdown time; any other use is an error.\nOnce again, the module_exit declaration is necessary to enable to kernel to find your\ncleanup function.\nIf your module does not define a cleanup function, the kernel does not allow it to be\nunloaded.\n\n\n\n##Error Handling\nIf it turns out that your module simply cannot load after a particular type of failure,\nyou must undo any registration activities performed before the failure. Linux doesn’t\nkeep a per-module registry of facilities that have been registered, so the module must\nback out of everything itself if initialization fails at some point. If you ever fail to\nunregister what you obtained, the kernel is left in an unstable state; it contains inter-\nnal pointers to code that no longer exists. In such situations, the only recourse, usu-\nally, is to reboot the system. You really do want to take care to do the right thing\nwhen an initialization error occurs.\n\n\nThe following sample code (using fictitious registration and unregistration func-\ntions) behaves correctly if initialization fails at any point:\n```C\nint __init my_init_function(void)\n{\nint err;\n/* registration takes a pointer and a name */\nerr = register_this(ptr1, \"skull\");\nif (err) goto fail_this;\nerr = register_that(ptr2, \"skull\");\nif (err) goto fail_that;\nerr = register_those(ptr3, \"skull\");\nif (err) goto fail_those;\nreturn 0; /* success */\nfail_those: unregister_that(ptr2, \"skull\");\nfail_that: unregister_this(ptr1, \"skull\");\nfail_this: return err; /* propagate the error */\n}\n```\nThis code attempts to register three (fictitious) facilities. The goto statement is used\nin case of failure to cause the unregistration of only the facilities that had been suc-\ncessfully registered before things went bad.\n\nThe return value of my_init_function, err , is an error code. In the Linux kernel, error\ncodes are negative numbers belonging to the set defined in <linux/errno.h>. If you\nwant to generate your own error codes instead of returning what you get from other\nfunctions, you should include <linux/errno.h> in order to use symbolic values such\nas -ENODEV , -ENOMEM , and so on. It is always good practice to return appropriate error\ncodes, because user programs can turn them to meaningful strings using perror or\nsimilar means.\n\n##Module Loading Races\n\nIt is entirely possible, in other words, that the kernel will make calls into your\nmodule while your initialization function is still running. So your code must be pre-\npared to be called as soon as it completes its first registration. Do not register any\nfacility until all of your internal initialization needed to support that facility has been\ncompleted.\n\n##Module Parameters\n\nparameter values can be assigned at load time by insmod or modprobe; the lat-\nter can also read parameter assignment from its configuration file (/etc/modprobe.\nconf).\n\nParameters are declared with the module_param macro, which is\ndefined in moduleparam.h. module_param takes three parameters: the name of the\nvariable, its type, and a permissions mask to be used for an accompanying sysfs\nentry. The macro should be placed outside of any function and is typically found\nnear the head of the source file.\n\ntypes - bool, invbool, charp, int, long, short, uint, ulong, ushort\n\n`module_param_array(name,type,num,perm);`\n\nThe final module_param field is a permission value; you should use the definitions\nfound in <linux/stat.h>. This value controls who can access the representation of the\nmodule parameter in sysfs. If perm is set to 0 , there is no sysfs entry at all; otherwise,\nit appears under /sys/module * with the given set of permissions. Use S_IRUGO for a\nparameter that can be read by the world but cannot be changed; S_IRUGO|S_IWUSR\nallows root to change the parameter.\n\n\n\n#User space drivers\n\nThe advantages of user-space drivers are:\n• The full C library can be linked in. The driver can perform many exotic tasks\nwithout resorting to external programs (the utility programs implementing usage\npolicies that are usually distributed along with the driver itself).\n• The programmer can run a conventional debugger on the driver code without\nhaving to go through contortions to debug a running kernel.\n• If a user-space driver hangs, you can simply kill it. Problems with the driver are\nunlikely to hang the entire system, unless the hardware being controlled is really\nmisbehaving.\n• User memory is swappable, unlike kernel memory. An infrequently used device\nwith a huge driver won’t occupy RAM that other programs could be using,\nexcept when it is actually in use.\n• A well-designed driver program can still, like kernel-space drivers, allow concur-\nrent access to a device.\n• If you must write a closed-source driver, the user-space option makes it easier for\nyou to avoid ambiguous licensing situations and problems with changing kernel\ninterfaces.\n\n\nthe user-space approach to device driving has a number of drawbacks. The most\nimportant are:\n• Interrupts are not available in user space. There are workarounds for this limita-\ntion on some platforms, such as the vm86 system call on the IA32 architecture.\n• Direct access to memory is possible only by mmapping /dev/mem, and only a\nprivileged user can do that.\n• Access to I/O ports is available only after calling ioperm or iopl. Moreover, not\nall platforms support these system calls, and access to /dev/port can be too slow\nto be effective. Both the system calls and the device file are reserved to a privi-\nleged user.\n• Response time is slower, because a context switch is required to transfer infor-\nmation or actions between the client and the hardware.\n• Worse yet, if the driver has been swapped to disk, response time is unacceptably\nlong. Using the mlock system call might help, but usually you’ll need to lock\nmany memory pages, because a user-space program depends on a lot of library\ncode. mlock, too, is limited to privileged users.\n• The most important devices can’t be handled in user space, including, but not\nlimited to, network interfaces and block devices.\n\n\n\n",
      "title": "Modules",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "",
      "file": {
        "body": "AAYBAAxvC1VED66FiReaQeP9A4MHCeSpRMwqMhAUM/SJt4A="
      },
      "has_file": false,
      "id": "016edbbe200404b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b71003b",
      "keys": [
        {
          "k": "AAYBAAyhA+VSEjCmN7S02e6NQW5JcKGh/QRZC/drVTCFah2nmazQLZa3rktIjS5Zw0kQ9cIgcETNTmEA0113nZA=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575699067,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "```printk(KERN_SHO \"4\" ....```\n\n4- warning - log_level\n\n- Console LogLevels\nThere are eight possible loglevel strings, defined in the header <linux/kern_levels.h> :\n\n```C\n#define KERN_SOH \"\\001\"  /* ASCII Start Of Header */\n#define KERN_SOH_ASCII '\\001'\n\n#define KERN_EMERG KERN_SOH \"0\" /* system is unusable */\n#define KERN_ALERT KERN_SOH \"1\" /* action must be taken immediately */\n#define KERN_CRIT KERN_SOH \"2\" /* critical conditions */\n#define KERN_ERR KERN_SOH \"3\" /* error conditions */\n#define KERN_WARNING KERN_SOH \"4\" /* warning conditions */\n#define KERN_NOTICE KERN_SOH \"5\" /* normal but significant condition */\n#define KERN_INFO KERN_SOH \"6\" /* informational */\n#define KERN_DEBUG KERN_SOH \"7\" /* debug-level messages */\n\n#define KERN_DEFAULT KERN_SOH \"d\" /* the default kernel loglevel */\n```\n\nlog-levels 1 to 7\n-set in /proc/sys/kernel/printk\n\n-instead of printk(message_level... , we have other functions like: pr_emerg(), pr_crit(), pr_err() , pr_warning() etc, but we have to mention the following in Makefile.\n\n```ccflags-y:= -DDEBUG```\n\n-printk doesn't support %f floating point.\n-kernel doesn't support FPU... context switch time is high.\n-printk_ratelimit() - to restrict the logging per program.\nThe printk_ratelimit, returns 1 as long as the number of prints do not exceed the limit. Once the limit is reached it starts returning 0. \n\nThus the function can be used as a condition for an \"if\" statement to decide whether to print a message or not. \n\nThe printk will be enabled again after a time interval in seconds mentioned in the file /proc/sys/kernel/printk_ratelimit \n\n-why did printk_once.c print 20? and not 0?\n\n\n-printk will by default print on a new line.\nCan prevent this by using KERN_CONT\n\n-print_hex_dump()\n```\nvoid print_hex_dump(const char *level, const char *prefix_str, int prefix_type, int rowsize, int groupsize, const void *buf, size_t len, bool ascii);\n```\n\n-print_hex_dump_bytes()\n```\nvoid print_hex_dump_bytes(const char *prefix_str, int prefix_type, const void *buf, size_t len)\n```\n\n#CONFIG_DYNAMIC_DEBUG\n\ndebugfs filesystem - pr_debug()/dev_debug() writes to this filesystem\n\nyou2brutus@you2brutus-X555LF:/boot$ mount | grep debugfs\ndebugfs on /sys/kernel/debug type debugfs (rw,relatime)\n\ncontrol file - <debugfs>/dynamic_debug/control, where <debugfs>=/sys/kernel/debug/\n\n-how to check whether a config is enabled or not in running kernel?\nAns: In /boot$ cat config-4.11.6 | grep CONFIG_XXXX\n\n\n\n#Text Notes\n\n\n-Configuration options that should be enabled for kernels used for\ndevelopment:\n\nCONFIG_DEBUG_KERNEL\n         This option just makes other debugging options available; it should be turned on\nbut does not, by itself, enable any features.\n\nCONFIG_DEBUG_SLAB\n         This crucial option turns on several types of checks in the kernel memory alloca-\ntion functions; with these checks enabled, it is possible to detect a number of\nmemory overrun and missing initialization errors. Each byte of allocated memory\nis set to 0xa5 before being handed to the caller and then set to 0x6b when it is\nfreed. If you ever see either of those “poison” patterns repeating in output from\nyour driver (or often in an oops listing), you’ll know exactly what sort of error to\nlook for. When debugging is enabled, the kernel also places special guard values\nbefore and after every allocated memory object; if those values ever get changed,\nthe kernel knows that somebody has overrun a memory allocation, and it com-\nplains loudly. Various checks for more obscure errors are enabled as well.\n\nCONFIG_DEBUG_PAGEALLOC\n       Full pages are removed from the kernel address space when freed. This option\ncan slow things down significantly, but it can also quickly point out certain\nkinds of memory corruption errors.\n\nCONFIG_DEBUG_SPINLOCK\n        With this option enabled, the kernel catches operations on uninitialized spin-\nlocks and various other errors\n\nCONFIG_DEBUG_SPINLOCK_SLEEP\n         This option enables a check for attempts to sleep while holding a spinlock. In\nfact, it complains if you call a function that could potentially sleep, even if the\ncall in question would not sleep.\n\nCONFIG_INIT_DEBUG\n        Items marked with __init (or __initdata ) are discarded after system initializa-\ntion or module load time. This option enables checks for code that attempts to\naccess initialization-time memory after initialization is complete.\n\nCONFIG_DEBUG_INFO\n        This option causes the kernel to be built with full debugging information\nincluded. You’ll need that information if you want to debug the kernel with gdb.\nYou may also want to enable CONFIG_FRAME_POINTER if you plan to use gdb.\n\nCONFIG_MAGIC_SYSRQ\n     Enables the “magic SysRq” key\n\nCONFIG_DEBUG_STACKOVERFLOW\nCONFIG_DEBUG_STACK_USAGE\n      These options can help track down kernel stack overflows. A sure sign of a stack\noverflow is an oops listing without any sort of reasonable back trace. The first\noption adds explicit overflow checks to the kernel; the second causes the kernel\nto monitor stack usage and make some statistics available via the magic SysRq\nkey.\n\nCONFIG_KALLSYMS\n       This option (under “General setup/Standard features”) causes kernel symbol\ninformation to be built into the kernel; it is enabled by default. The symbol\ninformation is used in debugging contexts; without it, an oops listing can give\nyou a kernel traceback only in hexadecimal, which is not very useful.\n\nCONFIG_IKCONFIG\nCONFIG_IKCONFIG_PROC\n       These options (found in the “General setup” menu) cause the full kernel config-\nuration state to be built into the kernel and to be made available via /proc. Most\nkernel developers know which configuration they used and do not need these\noptions (which make the kernel bigger). They can be useful, though, if you are\ntrying to debug a problem in a kernel built by somebody else.\n\nCONFIG_ACPI_DEBUG\n         Under “Power management/ACPI.” This option turns on verbose ACPI\n(Advanced Configuration and Power Interface) debugging information, which\ncan be useful if you suspect a problem related to ACPI.\n\nCONFIG_DEBUG_DRIVER\n         Under “Device drivers.” Turns on debugging information in the driver core,\nwhich can be useful for tracking down problems in the low-level support code.\n\nCONFIG_SCSI_CONSTANTS\n         This option, found under “Device drivers/SCSI device support,” builds in infor-\nmation for verbose SCSI error messages. If you are working on a SCSI driver, you\nprobably want this option.\n\nCONFIG_INPUT_EVBUG\n        This option (under “Device drivers/Input device support”) turns on verbose log-\nging of input events. If you are working on a driver for an input device, this\noption may be helpful. Be aware of the security implications of this option, how-\never: it logs everything you type, including your passwords.\n\nCONFIG_PROFILING\n        This option is found under “Profiling support.” Profiling is normally used for\nsystem performance tuning, but it can also be useful for tracking down some\nkernel hangs and related problems.\n\n\n\n\n\nprintk\n\nprintk lets you classify messages according to their\nseverity by associating different loglevels, or priorities, with the messages. You usu-\nally indicate the loglevel with a macro.\n\nThere are eight possible loglevel strings, defined in the header <linux/kernel.h>; we\nlist them in order of decreasing severity:\nKERN_EMERG\nUsed for emergency messages, usually those that precede a crash.\nKERN_ALERT\nA situation requiring immediate action.\nKERN_CRIT\nCritical conditions, often related to serious hardware or software failures.\nKERN_ERR\nUsed to report error conditions; device drivers often use KERN_ERR to report hard-\nware difficulties.\nKERN_WARNING\nWarnings about problematic situations that do not, in themselves, create seri-\nous problems with the system.\nKERN_NOTICE\nSituations that are normal, but still worthy of note. A number of security-related\nconditions are reported at this level.\nKERN_INFO\nInformational messages. Many drivers print information about the hardware\nthey find at startup time at this level.\nKERN_DEBUG\nUsed for debugging messages.\nEach string (in the macro expansion) represents an integer in angle brackets. Inte-\ngers range from 0 to 7, with smaller values representing higher priorities.\n\nA printk statement with no specified priority defaults to DEFAULT_MESSAGE_LOGLEVEL ,\nspecified in kernel/printk.c as an integer. In the 2.6.10 kernel, DEFAULT_MESSAGE_LOGLEVEL\nis KERN_WARNING ,\n\nIf both klogd and sys-\nlogd are running on the system, kernel messages are appended to /var/log/messages\n\nyou read /proc/kmsg (which is often most easily done with the dmesg command)\n\nThe variable console_loglevel is initialized to DEFAULT_CONSOLE_LOGLEVEL and can be\nmodified through the sys_syslog system call. One way to change it is by specifying\nthe –c switch when invoking klogd,\n\nto change the current value, you must first kill klogd and then restart it with the –c\noption.\n\nIt is also possible to read and modify the console loglevel using the text file /proc/sys/\nkernel/printk. The file hosts four integer values: the current loglevel, the default level\nfor messages that lack an explicit loglevel, the minimum allowed loglevel, and the\nboot-time default loglevel. Writing a single value to this file changes the current\nloglevel to that value; thus, for example, you can cause all kernel messages to appear\nat the console by simply entering:\n```# echo 8 > /proc/sys/kernel/printk```\n\n\nsetconsole uses the special ioctl command TIOCLINUX , which implements Linux-\nspecific functions. To use TIOCLINUX , you pass it an argument that is a pointer to a\nbyte array. The first byte of the array is a number that specifies the requested sub-\ncommand, and the following bytes are subcommand specific. In setconsole, subcom-\nmand 11 is used, and the next byte (stored in bytes[1] ) identifies the virtual console.\n\nThe printk function writes messages into a circular buffer that is __LOG_BUF_LEN bytes\nlong: a value from 4 KB to 1 MB chosen while configuring the kernel.\n\nnote that reading from /proc/kmsg con-\nsumes the data from the log buffer, whereas the syslog system call can optionally\nreturn log data while leaving it for other processes as well. In general, reading the\n/proc file is easier and is the default behavior for klogd. The dmesg command can be\nused to look at the content of the buffer without flushing it; actually, the command\nreturns to stdout the whole content of the buffer, whether or not it has already been\nread.\n\n\nprintk can be invoked from anywhere, even from an interrupt handler, with no\nlimit on how much data can be printed. The only disadvantage is the possibility of\nlosing some data.\n\nIf the klogd process is running, it retrieves kernel messages and dispatches them to\nsyslogd, which in turn checks /etc/syslog.conf to find out how to deal with them. sys-\nlogd differentiates between messages according to a facility and a priority; allowable\nvalues for both the facility and the priority are defined in <sys/syslog.h>. Kernel mes-\nsages are logged by the LOG_KERN facility at a priority corresponding to the one used in\nprintk (for example, LOG_ERR is used for KERN_ERR messages). If klogd isn’t running,\ndata remains in the circular buffer until someone reads it or the buffer overflows.\n\nsyslogd - reads from kernel buffer and writes to file /var/log/kern.\n\n\nTo clear up a fundamental misconception, dmesg does not read from /var/log/dmesg. It reads directly from the kernel ring buffer and gives you the most recent N messages. Towards the end of the boot process, dmesg is invoked to write the boot messages to /var/log/dmesg (with older versions of that file being rotated in the usual manner).\n\nOnce you have a syslog running (syslogd, rsyslogd, syslog-ng, etc.) it reads from the kernel buffer and writes to a file such as /var/log/kern.log. (This is for Debian; other systems will vary). Assuming your system was able to write to disk and flush the disk buffers before it crashed, that is where you will find the dying screams of the kernel.\n\n\nIn Debian, dmesg logs are stored as:\n\n    /var/log/dmesg (live and uncompressed)\n    /var/log/dmesg.0 (last session and uncompressed)\n    /var/log/dmesg.1.gz (penultimate and compressed)\n    /var/log/dmesg.2.gz (antepenultimate and compressed)\n    /var/log/dmesg.3.gz (3rd from last and compressed)\n    /var/log/dmesg.4.gz (4th from last and compressed)\n\n\nHere we show one way to code printk calls so you can turn them on and off individu-\nally or globally; the technique depends on defining a macro that resolves to a printk\n(or printf) call when you want it to:\n• Each print statement can be enabled or disabled by removing or adding a single\nletter to the macro’s name.\n• All the messages can be disabled at once by changing the value of the CFLAGS\nvariable before compiling.\n•The same print statement can be used in kernel code and user-level code, so that\nthe driver and test programs can be managed in the same way with regard to\nextra messages.\n\n\n\n#Rate Limit\n\n```int printk_ratelimit(void);```\n\n```\nif (printk_ratelimit( ))\nprintk(KERN_NOTICE \"The printer is still on fire\\n\");\n```\n\nprintk_ratelimit works by tracking how many messages are sent to the console.\nWhen the level of output exceeds a threshold, printk_ratelimit starts returning 0 and\ncausing messages to be dropped.\n\nThe behavior of printk_ratelimit can be customized by modifying /proc/sys/kernel/\nprintk_ratelimit (the number of seconds to wait before re-enabling messages) and are\n/proc/sys/kernel/printk_ratelimit_burst (the number of messages accepted before rate-\nlimiting).\n\nA few techniques are available to driver developers for querying the system: creating\na file in the /proc filesystem, using the ioctl driver method, and exporting attributes\nvia sysfs. The use of sysfs requires quite some background on the driver model.\n",
      "title": "V4 - printk and debugging",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "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",
      "file": {
        "body": "AAYBAAw/vIaFOMC1070asK8+biKIUaRp/6TTNbNuE8HMRWI="
      },
      "has_file": false,
      "id": "016edc0bf64d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710043",
      "keys": [
        {
          "k": "AAYBAAycJEKWk4aEfFc6GrjIlCO+ften+CAPllbYUrXPxxKgRwNQdlEnhop55W6XoZsExH98Pquc798M7FZwzxg=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575704882,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "Q) Find out how many processors?\nAns: 1) $lscpu\n     2) cat /proc/cpuinfo | grep processor\n     3) $nproc \n     4) num_online_cpus() from kernel space\n     5) Using the MACRO NR_CPUS\n\nq) how excatly does the kernel count the number of cpus?\n\n\n#task list\ncircular doubly linked list.\n \n\nIn linux/include/sched.h, __task_struct__ declaration is stored.\nProcess name is stored in `char comm[TASK_COMM_LEN];`\n\nmacro \"current\" - always returns a pointer to the task_struct. - has to be implemented by each architecture.\n\n\nq) what do you mean by \"address space of a process\"? how can it be checked from user space?\nAns: $ cat /proc/pid/maps\n\n-This info is present in struct __mm_struct__ - contains list of VMA, page tables etc. \nThis contains __vm_area_struct__ member. - again linkedlist is used to store the memory addresses\n\n\n\n\n##Kernel Thread\n\n-kernel threads don't have address space\n\n-can be identified by the [] in the ps output.\n-created using kthread_create()\n-started using wake_up_process()\n-can be combined using kthread_run()\n-can be stopped by kthread_stop()\n\nQ) what does kthread_create return?\nAns: task_struct * - a pointer to a task struct\n\nQ) Prototype of kernel thread function?\nAns: int thread_func (void *)\n\n-If you call kthread_stop() on a thread that exited, you will get oops message - warning\n\n-smp_processor_id() to know on which processor(core) our thread is running.\n\n\nQ) What happens if kthread_stop() is called but the thread has exited because it didn't have kthread_should_stop()? \nor\nwhat happens if kthread_should_stop() is not called?\n\nAns: thread gets killed and we get an oops message in kernel buffer \n\nQ) What happens if kthread_stop() is not called?\nAns: Oops will happen. \n\nNote: $dmesg --follow \nTo view the buffer live as and when messages appear\n",
      "title": "Kernel Threads",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "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",
      "file": {
        "body": "AAYBAAyYIJn52KytoRPnD/pWZ1eCB8lP1oX/Ct5/D100gNk="
      },
      "has_file": false,
      "id": "016ee0a0336c04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b71008f",
      "keys": [
        {
          "k": "AAYBAAywjrRUKAPsvBNOHRg/WETYnUK9mIa0T3n6a8KLPf+YJfAJtfaebO8TXYcDzPu8MsSHJgU7LX1WjfRdyGc=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575729946,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "$ ls -l /dev | grep \"^c\"    - search for character devices\n\n-connection between device file and driver is number - major and minor numebrs\nMajor : type of device (IDE,SCSI,serial,USB etc)\nMinor : identifies the device (first disk, second serial port)\n\n$ls -l /dev\n5th col - major\n6th col - minor\n\n-Documentation/admin-guide/devices.txt\n\n-static and dynamic ID\n-data-type dev_t\n-12 bit major + 20 bit minor\n-MAJOR() and MINOR() macros\n\n```\n#include <linux/kdev_t.h>\nMKDEV(major,minor)\n```\n-/proc/devices\n-register_chrdev_region() and unregister_chrdev_region()\n\n-if major number is already used, we can't use it for our device. However same name as existing one can be used.\n-max major number - 512 defined in include/linux/fs.h - CHRDEV_MAJOR_MAX\n\n\nfor dynamically allocating major number, use alloc_chrdev_region()\nfor deallocating, unregister_chrdev_region()\n\ndynamic allocation - fs/char_dev.c\nfirst segment free major numbers end at 234\nsecond segment free major numbers end at 384, start at 511.\n\n-mknod - to create device file manually- it will just create the file, no device is registered.\n\nudev-will create a file only when there is a device.\n class_create() - create a struct class structure - the name will appear in /sys/class/name\n class_destroy() - to remove a class from sysfs/\n\n$udevadm monitor - tap into udev in real time and see what happens when you plug in a new device\n\ndevice_create() - to create a device and register it with sysfs \n\n\nSo, to create a device including sysfs entry,\nIn init(),\n1) create a class with class_create()\n2) dynamically allocate the device numbers using alloc_chrdev_region()\n3) create a device node using device_create()\n\nIn exit(),\n1) unregister_chrdev_region\n2) device_destroy()\n3) class_destroy()\n\n\nNote: __init and __exit creates new sections .init and .exit in the object file.\n\n\n#fops \nholds pointers to functions defined by the driver that performs various operations on the device (usually open,read,write,release).\n-fops have to be registered with the kernel in order to use them\n\nstruct cdev\n-each device is represented by this structure\n\ncdev functions:\n-cdev_init() - clears the cdev structure memebers and assigns the file operations.\n-cdev_alloc() - allocates memory for struct cdev and returns a pointer\n-cdev_add()\n-cdev_del()\n\nowner=THIS_MODULE - to protect against illegal unloads\n\n-Pseudodevices - not physical devices \neg: /dev/urandom, /dev/null, /dev/zero\n\n-drivers/char/mem.c has the implementation of pseudo devices.\n\n\n\n#cdev_init vs cdev_alloc\n\nyou can use either:\n\nstruct cdev my_cdev;\n\nin this case you don't need to call cdev_alloc because memory is already allocated. Instead you must call cdev_init(&my_cdev, &fops). and then my_cdev.owner = THIS_MODULE;\n\nOR\n\nyou can use:\n\nstruct cdev *my_cdev_p;\n\nin this case you must call cdev_alloc() to allocate memory. Then, you have to initialize my_cdev_p->ops=&fops; and my_cdev_p->owner = THIS_MODULE;. Never use cdev_init() in this case!\n",
      "title": "Char Drivers",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "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",
      "file": {
        "body": "AAYBAAxvmfx6pXcS06u/+o5n+fSgMePWLxzK8QQlxFiqW5A="
      },
      "has_file": false,
      "id": "016ee0d2490e04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b71009b",
      "keys": [
        {
          "k": "AAYBAAwOWVgfsD/Y1BrZETDYAMhd4FrvTGz/VvVr8YPyNqX2oFxwPkRfNQI4wzIp/c//UYbm1VR9HSpLwDUTjbc=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575729907,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "#Static allocation of device numbers\n1)\n```\nint register_chrdev_region (dev_t from,\tunsigned count,\tconst char *name);\n```\nDescription: register a range of device numbers\n\nArguments:\n\nfrom : the first in the desired range of device numbers; must include the major number.\n\ncount: the number of consecutive device numbers required\n\nname: the name of the device or driver. This will appear in /proc/devices\n\nReturn Value:\nzero on success, a negative error code on failure.\n\n\n2) \n```\nvoid unregister_chrdev_region(dev_t from, unsigned int count);\n```\n1) and 2) Header File: <linux/fs.h>\n\n\n\n#Dynamic Allocation of device numbers\n3) \n```\nint alloc_chrdev_region (dev_t *  dev,\n\t\t \tunsigned  \tbaseminor,\n \t\t\tunsigned  \tcount,\n\t\t \tconst char *  \tname);\n```\nDescription\n=================\nAllocates a range of char device numbers.\nThe major number will be chosen dynamically, and returned (along with the first minor number) in dev\n\nArguments\n===============\ndev \t\t-->\toutput parameter for first assigned number\nbaseminor \t--> \tfirst of the requested range of minor numbers\ncount\t\t-->\tthe number of minor numbers required\nname\t\t-->\tthe name of the associated device or driver\n\n\nReturn Value\n=============\nReturns zero or a negative error code.\n\n\n#Manual creation of device files\n4) \n```\nmknod -m <permissions> <name> <device type> <major> <minor>\n```\neg: `$sudo mknod -m 0644 /dev/mydevice c 244 10`\n\n\n#Create class structure\n5)\n```\nstruct class * class_create (struct module *owner,\n\t\t\t     const char *name);\n```\nowner\t-\tpointer to the module that is to “own” this struct class\nname\t-\tpointer to a string for the name of this class.\n\nHeader File: <linux/device.h>\n\nDescription\n=================\nThis is used to create a struct class pointer that can then be used in calls to class_device_create.\n-the name will appear in /sys/class/<name>.\n\n#Destroy class structure\n6)\n```\nvoid class_destroy (struct class *cls);\n```\n\n\n#Create a device and register it with sysfs\n7)\n```\nstruct device * device_create(struct class *class,\n \t\t\t      struct device *parent,\n\t\t\t      dev_t  devt,\n\t\t\t      void *drv_data,\n \t\t\t      const char *fmt,\n\t\t \t      ...);\n```\nDescription\n=================\nA struct device will be created in sysfs, registered to the specified class.\n\nArguments\n=================\nclass \t-->\tpointer to the struct class that this device should be registered to\nparent  -->\tpointer to the parent struct device of this new device, if any\ndevt    --> \tthe dev_t for the char device to be added\nfmt\t-->     string for the device's name\n...\t-->\tvariable arguments\n\n\n#Destroy a device\n8)\n```\nvoid device_destroy (struct class *class, dev_t devt);\n```\n\n\n9)struct cdev\n==================================\n\nIn kernel, each character device is represented using this structure.\n\nHeader File: linux/cdev.h\n```\nstruct cdev {\n        struct kobject kobj;\n  --->  struct module *owner;\n  --->  const struct file_operations *ops;\n        struct list_head list;\n  --->  dev_t dev;\n        unsigned int count;\n} __randomize_layout;\n```\n\n#Initialize cdev\n10)\n```\nvoid cdev_init(struct cdev *, const struct file_operations *); \n```\ninitialize a cdev structure\n\n\n#Allocate cdev\n11)\n```\nstruct cdev *cdev_alloc(void);\n```\nAllocates and returns a cdev structure\n\n\n#Add a char device to system\n12)\n```\nint cdev_add(struct cdev *, dev_t, unsigned int minor_count);\n```\nadd a char device to the system\n\n#Remove a character device\n13)\n```\nvoid cdev_del(struct cdev *dev); \n```\n\nSteps\n1) create a class using class_create()\n2) get device major and minor numbers using alloc_chrdev_region()\n3) create a device using device_create() and populate dev_t object\n4) cdev structure allocation and initialization using cdev_init() or cdev_allocate()\n5) add the device to the system using cdev_add()\n\n",
      "title": "Char driver functions/structures",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "AAYBAAwkkcXH7Qp+H0tikp6OhXWCGCwFiXAyE/BClVh77JlVRcrFxSOdi4Mn338FbFrr5LaVHYnRJFgaPkoKTENvroOL3JY7b+8kP2Nc175IMfT45jaVdIWE0bnZbTzOp0O1IvPS5gcg5ekYlGyIwvbm6bEwZX9KeYmcqQka7dNjjGFW7qIXbCxZygyJikEOj4ZHtclRGyU210ZP+RRP3wcfEF9Xj8wjaudd24IAOogbSzc6UsA+crc2MHd6Y/xrMZhA10r77JhIpIoAbRhDwptSDMpU/8+xGNJAETbRzO3iwL/G1RlWRLR4e5s9W0KCYS7DxYY2ujc=",
      "file": {
        "body": "AAYBAAwGGpy1MIsy6k2iEypTiMMEcxWpwgrsrLPMoCch92M="
      },
      "has_file": false,
      "id": "016ee110f9d504b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b7100b8",
      "keys": [
        {
          "k": "AAYBAAy+F0KJFYA0BBHBevui6E+mY9eadWE1Ok0TH26aVU5ojXk5n2oa6KORKGdgHL9YHONx1GWFg7tuYTk8vuM=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575734016,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "1)\n$ make qemu_arm_versatile_defconfig\n\n2)\n$make\n\n3)\n$ cat board/qemu/arm-versatile/readme.txt\n\ncopy the command and execute\n\n",
      "title": "QEMU and ARM Buildroot",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "AAYBAAxrGo9fjmBUW15rZfOtyrHdjy891RrRSOjFVyjZffJEeEbgpjbQvz1jWh11D+Lk/QMSUyF4g6dSWAl7QSELe+qmHwxkciMLYcMQSI2idrHgiPv9c7XgLvnwW3e8GRfcaqgJL17k+F7+B+elIJ6bdNqfBG7rkf3Ttsu3fRFtzbfoANsp8Yc218HeSjDj5+91ofE8U3OD7AXGtNpTiyhIDF+lHJhlNRVFxD7mPG66Y6mhXGyaWsY7jbv3Miv5p6AXvvF+B2iYHxcay4TNDXk3lTTM2zVBET5u4GykHcfdgdHs+7NCqp8DjrbVmyeYFyWE5unuV38=",
      "file": {
        "body": "AAYBAAxBvopXSaUqKfe6LglV23HsI7bHygUyIL+GOURVwJs="
      },
      "has_file": false,
      "id": "016ee110fe1804b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b7100ba",
      "keys": [
        {
          "k": "AAYBAAzCoFPU3cjONm7cIdsgh9dPrvFfb48nVpd2Jo9K8J32DzcnFKeAadq1jXbjTVaxZCqMXYaOw1unQMW0+sE=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575734017,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "1)\n$ make qemu_arm_versatile_defconfig\n\n2)\n$make\n\n3)\n$ cat board/qemu/arm-versatile/readme.txt\n\ncopy the command and execute\n\n",
      "title": "QEMU and ARM Buildroot",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "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",
      "file": {
        "body": "AAYBAAw0B6n/QP0P8SDeqXt3t1Dr/kw9iV92RzgzOgbuF3c="
      },
      "has_file": false,
      "id": "016ee41edc2204b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b7100da",
      "keys": [
        {
          "k": "AAYBAAwVwc8GZUFcUKd+ndfVDoQnayAhL3rFMO+YIClNmxfYKHVRPb08f+DdjUZIvqyLbfUoyoysjaW1OOrVEB8=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575828830,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "-When a device driver file is opened and a process is forked, the child process can also write to the the file. However, release() will not close the file for reading/writing if the count is not zero.\n\natomic_long_t   f_count;   ---- in file struct\n\n-open() and release() are called only once.\n\n-Two unrelated processes can open the device file at the same time.... and individaully can release the files. Because different file structures.\n\n\n-In <linux/fs.h>\nstruct file{\n\n...\n}\n-represents an open file. created when we open a file. Every open file in the system has a struct file associated with it. It is passed to any kernel/user function using the file and is not closed until the last close().\n\n\n-struct inode\ncreated whenever a file is inode\n-device number dev_t is present in inode.\n\n-iminor() an imajor() macros - retrieves the major and minor number from inode\n\n\n-we cannot directly access a user address space from kernel space. It will result in page fault and segmentation fault.\n\n-4 function to read and write values from/to user space:\n-put_user()\n-get_user()\n-copy_to_user()\n-copy_from_user()\n\n-put_user() and copy_to_user() used in device_read()\n-get_user() and copy_from_user() used in device_write().\n\n-jiffies - a global variable which stores the number of clock ticks since boot. <linux/jiffies.h>\n\n-put_user is faster than copy_from_user.\n\n\n-if we have one variable on stack and another on heap and write it to the device using copy_from_user(), it willnot be able to write and dmesg hangs.\n\n-print_dev_t() and format_dev_t() - macros that writes major and minor numbers into a buffer\n   print_dev_t() returns number of characters written.\n   format_dev_t() returns the buffer.\n-buffer should be atleast 20 bytes.\n\n-user char buffer maybe swapped out, so calling strlen on user buffer will result in error.\n-direct operations on the user space variable must be avoided.\n\n-we ahve to use strnlen() - provided by kernel to find string length of user buffer.\n\n-after every device read and device write we must update the offset.\n\n-llseek method will implement lseek and llseek system calls.\nIf not seekable, return -ESPIPE\n\n\n-container_of() macro\nif we pass any member variable of a structure to this macro, it will give us the base address of the structure.\n\n\nwrite function flow\nwrite---->ksys_write(fs/read_write.c)---->vfs_write(fs/read_write.c)----->__vfs_write(fs/read_write.c)---->write function in our fops.\n",
      "title": "Char Drviers -  II",
      "type": "text",
      "user_id": 25998
    },
    {
      "board_id": null,
      "body": "AAYBAAy/a4rmaKx3aj5iwSbmPOKZgIIwTWCEco42Cbc98N1O7e7NpzTd8rIpJWD3HFOjusnfSl/h6q+AqAWCk11j5Jt0K25ZWj4O0eR1/m2fle3NhxVtVahzopS8Wk2ggifm75dJPYq9U5lAEXGoZ87Yjx9p0Kb2du23V1XsMdvVnEp+Of90H+pgB0Buq4pfIh03hTCqLub1XaFDLUNmMxEA3LBdaywyBLieY0hkRE4HGX/XBvyqYP2AEMahvC38Hw56ZBtBADg96ZHdAyg667/XWTl090fTmmrPX0UlejcadEyXU59WM+49zn6DpeebihKK2dSrTIq0Xeu6At3J48gNc9OmY0rA0yVXzg+FR2yz41XWc/bYu7+8iOnXYOH2vkkK10EJQXhFjTckgyycePrOFYLycCCkoEoknCY3PdcKBmsrVjKF5xo3O5sOObzGK7AcUNQVQtvsij8pdPIgYuDVLEBZUS+Q3qcJjLCjFqz25GMfr7teqaHOZ+yKC7XRWL6AdRxQS3+WjHiKZSmaLQ1CJmYYMBo8vNwW91DnOnGuPkxW6J7pZQ57oZLjVgxFXkpoMNY4lHX7BpxAZBy4oX9814Y0s05+t4otp8IjCZbjld/QAdtbHmTFFi/ofNzcZDzfkFi5rEgbyiVUSC/+beD5at9iqxZ1Q3A1NngDNLmsyMe1YwdQuK7JR3Xn+xfPQdFkXiWMffI3Dc5sbqBOayyvI8WVRwnlsb5DtocRgwk22yy4ey3twByC7NfCjF7xisJvSnMpfwURjsySbzSsc4gZwd5DEAHLbym6RuR1BoFF0N1rJMBpvygYgi12ogSZ6KgR7iI6DSkh0wmf2GRlQcsZh3W4x/Sg1Ru3IbkHl3vh4oWz4Ifkj/GzE7SVv1jZefSimoX7iH9ZxOQyQSKEbWmctvFtHX1sh9eaGIPRE54uaf2ng8PqjOd5iHpHPn6AWait2MbULlLrSt6wJLs73AQSS4oSLo4eVRJd1sURSGnlV9TlbysJWbn+0CvrF0Z8SPdc8UTWzARu7XKq08Rz6bnG062lcxhoaJkOKSYGMTzbOKPBdB9wRQfDuGpuPw+p6y+CK9SjfEeTMPynfqZTyznj2CZHQsEDvTvAk2c1krwGS3g9A1LjQj81OubkIEj3FfGXBXfUlnt7JKISLT5iRzcQmoR1RQhW4AFFAeEq8e1adl3FfNoWXaw5HsVQdZdzReNJw161zSrSUWnquMRYvsFUsYy6TV07mcRv2zWEHJD5C2iSqImuiOvNPkVnBByKX+sxUNN7Iv8sS4r8MVZroOsk2B1mzWn6Jig8c550NIbhtck2yoPLbQzI5Kb5StZqed0/0aAHIvgtRZXfNf6bHlYjuzPceO0ngzmsW4dkHPQDKI1rJYtyhYlxM6iEi/m9ssRsYB3cRA498PRY4H2vfgiXfJ6KHn8b9BcCT4y8cOMKhTWMpZxm3crNJqUEsULwAp4OJ2FFBeh0hic6z6Y2RHlTNOKgVb+hBggjuGajtTPy6/8656662L13oNodwcN+phRWMqr7V6pM5JI6fZpYrzCBel/fSIAOn0wkINMII0JGH4pkVqJreXEMPAYFbfgxd8ACBFGCRTwGVap9GKzi/q/kw57ZP4f8OgwUHyDpgAFvMTRiEhpTKOzl40/oeo/E9UzcPHp2XTkq7n6KPfyu+P1Hmvl2jYHUKfuj2jr6RCODkwY/gtgmT9loV4c15f/mxFxN5pbvz/fyGyzmema6yUzgHv2oJq8pvGuwjGqGEoKQunHMZJRdYXPxRcdiVKgSfcuACG/atPA92M17dIlJ+ZkqB+BrNsJaKkZO/xfsO62bl1kX8ynWgTPj4Tmne2lWQWyCpjbcoq7BhN2OunNisWEcpuO/RwSU5VHOFPr2ea9Rw6quN3kAJnFQ4Qc9kzU4wTu+naEiDRbTHNi60FBaoFUHRxlgnqFPCwNiX0B00dZZz07yw96kTX7gtOApfb/+64O+0bUShJAYulfwH9UO617gP6lCExrvuVdhysZcgaYikOqKk3MtgWMUXGbu9Wmyud6OfKRumo5uPGkNka91WvANEmiDLqCb9WCY8lqoBn8hNw2lz/dl97KMoYirJ1UeSCyhOtfvI5J3gCazaCezNuZl7kJrt8SVgD14HCfEnU2JW25mHvMijIW2ZXk9jZ6q+kfdiC44YAq5FOqz87eWj6DYJzuVANZyUvMc19ft3pOKEhwKpfBmjNzsZIgJSKQY3u21FkeX3FhpLYxjsYHk2x43YSJh96ablEZ/TwKkcCCp/NrX0apaJkkt/x3yjqDS/wxW+t4qP/JrzNWhJfxf1A4QOP+OCk+jQfzOEMUIu2wpPP6BAKGcQslcNRUFVKL0fjxM3XDG9TgdW8U4VkAaKsE9NYVSHQgykxVhr408nvamOArqlhVey4fLRBzKiXqa2umFxTHYyDf7a2Y9eL04/ne7I8kDiLmJfolti5AXPOWxb5Gct8y0IHVWKXzUFclNGrtRLLmf4+Px3mK1gAoFOguQSno/iKZVfNZfcttCjppT8HxaKTvTq19kdxtwV6mHkqP74zD7W+impWdf0+Kswoqj1flHnXzzlAgzEZyQncDbpsB5dRShOhXKZf//h2w+JLwgWTFjOGI6R/SCoHZOzH/7JIzmoo8+XOB9ugwlhlnCrKoVNumN/taFRf36qaprY9rumArOpzORCaoh7yiVLxLNUwW4r2yt5bvLgYSX7/okPcd73t6mKOKPAz5jCkmH2CaZ/D0fWVXAHuQ5Rx0O3+1zWvMfKBG6ozF/KFoOabWUjMU9LSU8qUmxwQ3yB8IOsLSQBMW9R99EzVLyq/xIhSKfIHga8HTvuN1OW9poXp9tpLfE8Qii1piXPEtdrBE4XiewmaBGydyQjjmy4kotY8JZq8smsr4aY5HrSi/KHpikHZiNGbtqfvYzK6ar+SeSSI2y3Vjov4jxNgp+qxj7EkXIpllZsSQK1aFivdr6+Hxwnqk8o2a2Lf9i7ikn/PK6ErWkLNEbxuux1HXhc2kuSySn7ydNvtUXq1YHpQFVVc/+FrSXBehG/dr4zkQxEewiHltt+NidlW4ws0ce+sVhHI2YAcjLNE448xUPhq4DnCsgO9F0AmVmq9ugpIVhZF48Q5Zhw5TcE8iQo9Ja2ZF1anjkeQl1B+EkEYFdKDiUM2bltNMBeCQH6q59hfCZrTdnaITD7Yn0J4AgCBbovwUTTnnzF7LSWUvrUi5STuGZ6RmzAZ+27fJ8jGryfp3TbmUelj1aUiEnDB2dCABcuQRithNa+SLMeG4V9jkiCwQGJBHDPOE3lvZhy+K66Aw/wtC0cWBCsSnPMTleNEC9dEoCHr/k79BPcS6dNGMFO2dIXQxBtChCoJ6SBh7y3+Z47nyOhNnUPsyOM3K5/5NWwrrcqlJcmk00nh+bEi8AS8p+ycB2a9bSmgnXTrDYyWpno+QRMXqSRRMOO0OvtP8Lk+k739EP14Z8PebEwj/W8pBP3+qDvMvQhqD7KxObsLPV0KMODI6ym4QkC0gJw5Sat5mdj9sdDz4q97n+ObLzfl5k3/cTxy9AyRR4fbooj6MV+G2GXeaGBD66HkpTuvymmDx2hrcTIPMnVv4FkMCG1BJtfA4H4YajOT5yuLCwhg2MCfkQjscL2vs+j4xeL22KT25w8Pr1wqPD2uPnh9i5ZvwQTDmU1lLO7uqfGqUwZ3HeWwT9XfZI0wwo0I6/JtAYHDntHT8/tg1qIRB3fXQ0si52E4XlyDqAsePQ9Vqsm/1CCHUFeBEClzSR5WUmyrbEi9Xlfb0hr2ai3MDAKfbAhtZ5wApz4LaS++1oFBmoCwGmMJrvpigi1996YDzFJ7xbjX3FnVs7qW5ogGumKuQV72ydrMZAAdYTL9KjPNzJ/w6luI2psqOyTzxabuXJ8mAaT5AduP28jy7Y6kt5uTV/1oPHgUSvuzlumamh6Dvxn/7/KBkF3xnhHrSO/DAuVOw92DblfkWB3Y/eLE8busejJWEuZxgByOdkebmEEPnPY9lbrfFMISR123NZbixrTT7bNV/s2NwnxF81n1YfS9lFLUzwXeRK8RDT6HhoNwXvwlK2+1m5w2jtM9X+TPCaEDBIIXNKrS8HsX/yCHF4LsffqTQ5pGt5er5whJfU3E7gGy7bsw/jpkiA2/RYc2rAsRoQjZdj4JeWnnS+cwjFFlSZvT7ZLls+nwS/NsUnQ2tUaFjk17+2Ie0zRFByK5o6U9rcPfVasL1qeHjeQpcUd77BuKsmtdKGSRQlZC4EKMVmEH1RCVzDjz50aCKVLLu3ug3EP66IlN4/KqeyAeP41dkUDB2+AmUZ9yyr77aXyHnRL3Biv4wOgs523xJGmKegyqUHctHhnba5HxXkGSeRFiW7m3SE5eXCgV7w17wr9S4m0Am4e0uhTtkimlIqBntRn9iG5btIbQKOx4KygjDEScQAnc3PzWo2r1ITGpu1sHI/ykd1sF/rgmMoiCC9GalAlNcV8yZ4v/rkr8dgMCKsWqFev2uRhicJiU/vGkVvVkeoj+2YfUG8gj9aMOcb4WfN5ccPIa1/71V04Mlx5bIIk9ErOo83ESv12s2O6RJSFT9sVxVVLyLhwaRrtHQI/p+4cNUaZhPiANsO0khTt8/lb2F6hIxvEtSBBSxs1Ns+bPx61Ci/Ic0Byl/cjfg5D539pxp6tJKmt58XoDjJvPcHmXAjN9fnxEnjHase4xrqja7EZi85cuY7H/2guwMa2ELO4NqKDYS4t0Fp+2rTo59v6B3yAmmcdTTuIyc3PTZEvU0yJ9xTmWbi1DJQHhlTtDoL2bNDnUTFcDRkC9B/6alTIB2CqjUKjYal0lpED90NLss2yKc/jZPpHCRNGTeemGwNKhV1mPakUJsn4hnz7TZ1OtldD5/6siIY9EhAZOROpro3d5OpYkEW7LzinU738Yprje1U/nT6K0dHW5dflHIcdZEjcZe1w4YevX2apQ3kqOKzqBGkCTh+jXI4CyUGsH8AEhuSjRb/3FJtB1bd/CUlGo8T90I4kdj9SqRo/mv9aXgNUqwSLuQ9N8KGqfbDb6lgBIbHMkhGGW3Q91vMS7Dcjst9+ZaX02R00IDKgPGCg6n+niaT7/SVcJoopdy6bxsoClgCTyvYQl9IkIDCm8lRXBc5126dug==",
      "file": {
        "body": "AAYBAAwXioVIDvmdT+8KhU3QunbqaD+iTF6h5AKuR2+BiZ4="
      },
      "has_file": false,
      "id": "016ee6bc09de04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710118",
      "keys": [
        {
          "k": "AAYBAAwTL0F/rT/+Q+gjAkEVNPfra61U57z2uGPjCaMumfCuFyTTYSzWNT+GVI+QZ1T7gzZww3oopTX1gKsUg3k=",
          "s": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000"
        }
      ],
      "mod": 1575829629,
      "space_id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "tags": [],
      "text": "Scull characteristics:\n\nThe scull source implements the following devices. Each kind of device implemented\nby the module is referred to as a type.\n\n__scull0 to scull3__\nFour devices, each consisting of a memory area that is both global and persis-\ntent. Global means that if the device is opened multiple times, the data con-\ntained within the device is shared by all the file descriptors that opened it.\nPersistent means that if the device is closed and reopened, data isn’t lost. This\ndevice can be fun to work with, because it can be accessed and tested using con-\nventional commands, such as cp, cat, and shell I/O redirection.\n\n__scullpipe0 to scullpipe3__\nFour FIFO (first-in-first-out) devices, which act like pipes. One process reads\nwhat another process writes. If multiple processes read the same device, they\ncontend for data. The internals of scullpipe will show how blocking and non-\nblocking read and write can be implemented without having to resort to inter-\nrupts.\n\n__scullsingle\nscullpriv\nsculluid\nscullwuid__\nThese devices are similar to scull0 but with some limitations on when an open is\npermitted. The first (scullsingle) allows only one process at a time to use the\ndriver, whereas scullpriv is private to each virtual console (or X terminal ses-\nsion), because processes on each console/terminal get different memory areas.\nsculluid and scullwuid can be opened multiple times, but only by one user at a\ntime; the former returns an error of “Device Busy” if another user is locking the\ndevice, whereas the latter implements blocking open. These variations of scull\nwould appear to be confusing policy and mechanism, but they are worth look-\ning at, because some real-life devices require this sort of management.\n\n\n#Major and Minor numbers\nChar devices are accessed through names in the filesystem. Those names are called\nspecial files or device files or simply nodes of the filesystem tree; they are convention-\nally located in the /dev directory. Special files for char drivers are identified by a “c”\nin the first column of the output of ls –l.\n\nTraditionally, the major number identifies the driver associated with the device. For\nexample, /dev/null and /dev/zero are both managed by driver 1, whereas virtual con-\nsoles and serial terminals are managed by driver 4;\n\nWithin the kernel, the dev_t type (defined in <linux/types.h>) is used to hold device\nnumbers—both the major and minor parts.\n\ndev_t is\na 32-bit quantity with 12 bits set aside for the major number and 20 for the minor\nnumber.\n\na set of macros\nfound in <linux/kdev_t.h>. To obtain the major or minor parts of a dev_t , use:\n```\nMAJOR(dev_t dev);\nMINOR(dev_t dev);\n```\nIf, instead, you have the major and minor numbers and need to turn them into a dev_t ,\nuse:\n```\nMKDEV(int major, int minor);\n```\n\nOne of the first things your driver will need to do when setting up a char device is to\nobtain one or more device numbers to work with. The necessary function for this\ntask is register_chrdev_region, which is declared in <linux/fs.h>:\n```\nint register_chrdev_region(dev_t first, unsigned int count,char *name);\n```\n\nif count is large, the range you request could spill over to the next major\nnumber;\n\nname is the name of the device that should be associated\nwith this number range; it will appear in /proc/devices and sysfs.\n\n\ndynamicly-allocated device numbers.\n```\nint alloc_chrdev_region(dev_t *dev, unsigned int firstminor,\nunsigned int count, char *name);\n```\n\nDevice numbers are freed with:\n```void unregister_chrdev_region(dev_t first, unsigned int count);```\nThe usual place to call unregister_chrdev_region would be in your module’s cleanup\nfunction.\n\n\n\n",
      "title": "Char Drivers - Text",
      "type": "text",
      "user_id": 25998
    }
  ],
  "schema_version": 2,
  "spaces": [
    {
      "body": null,
      "color": "#408080",
      "id": "016edaa48c8d04b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710000",
      "invites": [],
      "keys": [],
      "members": [],
      "title": "Personal",
      "user_id": 25998
    },
    {
      "body": null,
      "color": "#439645",
      "id": "016edaa4934204b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710004",
      "invites": [],
      "keys": [],
      "members": [],
      "title": "Work",
      "user_id": 25998
    },
    {
      "body": null,
      "color": "#800000",
      "id": "016edaa499e104b48e8a6a1ee04e2adf6d4fe89b3388ad8a0288a2f1ddbbbc31b7ed44670b710008",
      "invites": [],
      "keys": [],
      "members": [],
      "title": "Home",
      "user_id": 25998
    }
  ]
}