- Standard lists as provided by the kernel can be used to link data structures of any type with each other.
- It is explicitly not type-safe.
- The data structures to be listed must contain an element of the list_head type;

<list.h>
struct list_head {
    struct list_head *next, *prev;
};

This element could be placed in a data structure as follows:
struct task_struct {
    ...
    struct list_head run_list;
    ...
};

- The starting point for linked lists is again an instance of list_head that is usually declared and initial-
ized by the LIST_HEAD(list_name) macro.

- cyclic list - permits access to the first and last element of a list in O(1).

- struct list_head is called a list element when it is held in a data structure.

- An element that serves as the starting point for a list is called a list head.


Functions/Macros
----------------

- list_add(new, head)
    inserts 'new' right after the existing head element.

- list_add_tail(new, head)
    inserts 'new' right before the element specified by head . If the list head
    is specified for head , this causes the new element to be inserted at the end of the list because of
    the cyclic nature of the list.

- list_del(entry)
    deletes an entry from a list.

- list_empty(head)
    checks if a list is empty, that is, if it does not contain any elements.

- list_splice(list, head)
    combines two lists by inserting the list in list after the head element
    of an existing list.

- list_entry(ptr, type, member)
    used to find a list element;
    ptr is a pointer to the list_head instance of the
    data structure, type is its type, and member is the element name used for the list element.

    eg: struct task_struct = list_entry(ptr, struct task_struct, run_list)

- list_for_each(pos, head)
    used to iterate through all elements of a list. pos indicates
    the current position in the list, while head specifies the list head.

    eg:
    struct list_head *p;
    list_for_each(p, &list)
        if (condition)
            return list_entry(p, struct task_struct, run_list);
    return NULL;
