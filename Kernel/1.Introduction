To build a module

module_init() and module_exit()

In Makefile,contents:
obj-m+= hello.ko

$ make -C /lib/modules/`uname -r`/build M=${PWD} modules
-reads our makefile

Then insert our module
$ sudo insmod ./hello.ko

$ dmesg
-we will get following lines at end

[ 1197.072063] hello: loading out-of-tree module taints kernel.
[ 1197.072101] hello: module verification failed: signature and/or required key missing - tainting kernel
[ 1197.072314] test_hello_init: In init

$ sudo rmmod hello

$ dmesg

[ 1518.463501] test_hello_exit : In exit


To clean,
$ make -C /lib/modules/`uname -r`/build M=${PWD} clean



-To specify multiple objects to be built, in Makefile, we have to specify:

obj-m:=file.o

file-objs: file1.o file2.o file3.o

-To compile multiple modules simultaneously, we can give, in Makefile

obj-m:= hello1.o
obj-m+= hello2.o


-------------------------------------------------------------------------------------------------------------


text Notes

the role of a device driver is providing mechanism.

write kernel code to access the hardware, but don’t force particular
policies on the user, since different users have different needs

Policy-free drivers have a number of typical characteristics. These include support for
both synchronous and asynchronous operation, the ability to be opened multiple
times, the ability to exploit the full capabilities of the hardware, and the lack of soft-
ware layers to “simplify things” or provide policy-related operations. Drivers of this
sort not only work better for their end users, but also turn out to be easier to write
and maintain as well. Being policy-free is actually a common target for software
designers.

Almost every system operation eventually maps to a physical device. With the
exception of the processor, memory, and a very few other entities, any and all
device control operations are performed by code that is specific to the device
being addressed. That code is called a device driver. The kernel must have
embedded in it a device driver for every peripheral present on a system, from the
hard drive to the keyboard and the tape drive.


One of the good features of Linux is the ability to extend at runtime the set of fea-
tures offered by the kernel. This means that you can add functionality to the kernel
(and remove functionality as well) while the system is up and running.
Each piece of code that can be added to the kernel at runtime is called a module.

Each module is made up of object code
(not linked into a complete executable) that can be dynamically linked to the run-
ning kernel by the insmod program and can be unlinked by the rmmod program.

char module, a block module, or a network module.


Character devices
A character (char) device is one that can be accessed as a stream of bytes (like a
file); a char driver is in charge of implementing this behavior. Such a driver usu-
ally implements at least the open, close, read, and write system calls. The text
console (/dev/console) and the serial ports (/dev/ttyS0 and friends) are examples
of char devices, as they are well represented by the stream abstraction. Char
devices are accessed by means of filesystem nodes, such as /dev/tty1 and /dev/lp0.
The only relevant difference between a char device and a regular file is that you
can always move back and forth in the regular file, whereas most char devices
are just data channels, which you can only access sequentially. There exist,
nonetheless, char devices that look like data areas, and you can move back and
forth in them; for instance, this usually applies to frame grabbers, where the
applications can access the whole acquired image using mmap or lseek.


Block devices
Like char devices, block devices are accessed by filesystem nodes in the /dev
directory. A block device is a device (e.g., a disk) that can host a filesystem. In
most Unix systems, a block device can only handle I/O operations that transfer
one or more whole blocks, which are usually 512 bytes (or a larger power of
two) bytes in length. Linux, instead, allows the application to read and write a
block device like a char device—it permits the transfer of any number of bytes at
a time. As a result, block and char devices differ only in the way data is managed
internally by the kernel, and thus in the kernel/driver software interface. Like a
char device, each block device is accessed through a filesystem node, and the dif-
ference between them is transparent to the user. Block drivers have a completely
different interface to the kernel than char drivers.



Network interfaces
Any network transaction is made through an interface, that is, a device that is
able to exchange data with other hosts. Usually, an interface is a hardware
device, but it might also be a pure software device, like the loopback interface. A
network interface is in charge of sending and receiving data packets, driven by
the network subsystem of the kernel, without knowing how individual transac-
tions map to the actual packets being transmitted. Many network connections
(especially those using TCP) are stream-oriented, but network devices are, usu-
ally, designed around the transmission and receipt of packets. A network driver
knows nothing about individual connections; it only handles packets.
Not being a stream-oriented device, a network interface isn’t easily mapped to a
node in the filesystem, as /dev/tty1 is. The Unix way to provide access to inter-
faces is still by assigning a unique name to them (such as eth0 ), but that name
doesn’t have a corresponding entry in the filesystem. Communication between
the kernel and a network device driver is completely different from that used
with char and block drivers. Instead of read and write, the kernel calls functions
related to packet transmission.



the filesystem
type is instead a software driver, because it maps the low-level data structures to
high-level data structures. It is the filesystem that determines how long a filename
can be and what information about each file is stored in a directory entry. The file-
system module must implement the lowest level of the system calls that access direc-
tories and files, by mapping filenames and paths (as well as other information, such
as access modes) to data structures stored in data blocks. Such an interface is com-
pletely independent of the actual data transfer to and from the disk (or other
medium), which is accomplished by a block device driver.



In the official kernel distribution,
only an authorized user can load modules; the system call init_module checks if the
invoking process is authorized to load a module into the kernel. Thus, when run-
ning an official kernel, only the superuser, * or an intruder who has succeeded in
becoming privileged, can exploit the power of privileged code.
Security is a policy issue that is often best handled at higher levels within the kernel,
under the control of the system administrator.




Chapt-2

Regardless of the origin of your kernel, building modules for 2.6.x requires that you
have a configured and built kernel tree on your system.


-module_init and module_exit lines use special kernel macros to indicate the role of
these two functions.
Another special macro (MODULE_LICENSE) is used to tell the
kernel that this module bears a free license; without such a declaration, the kernel
complains when the module is loaded.

The printk function is defined in the Linux kernel and made available to modules; it
behaves similarly to the standard C library function printf. The kernel needs its own
printing function because it runs by itself, without the help of the C library.


The string KERN_ALERT is the priority of the message. *


every kernel module just registers itself in order to serve future requests,
and its initialization function terminates immediately. In other words, the task of the
module’s initialization function is to prepare for later invocation of the module’s
functions;

The module’s exit function (hello_exit in the example) gets invoked just before
the module is unloaded

-All kernel modules are event driven

A module runs in kernel space, whereas applications run in user space. This concept
is at the base of operating systems theory.



implement different operating modalities (or levels) in the CPU itself. The levels have
different roles, and some operations are disallowed at the lower levels; program code
can switch from one level to another only through a limited number of gates. Unix
systems are designed to take advantage of this hardware feature, using two such lev-
els. All current processors have at least two protection levels, and some, like the x86
family, have more levels; when several levels exist, the highest and lowest levels are
used. Under Unix, the kernel executes in the highest level (also called supervisor
mode), where everything is allowed, whereas applications execute in the lowest level
(the so-called user mode), where the processor regulates direct access to hardware
and unauthorized access to memory.



The role of a module is to extend kernel functionality; modularized code runs in ker-
nel space. Usually a driver performs both the tasks outlined previously: some func-
tions in the module are executed as part of system calls, and some are in charge of
interrupt handling.



