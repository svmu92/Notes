For most multi-threaded scenarios, often it can be observed that shared data is of custom sizes, for example, a structure with n elements of various types.
Concurrent code paths accessing such data usually comprise a bunch of instructions that are programmed to access and manipulate shared data; 
such access operations must be executed atomically to prevent races. To ensure atomicity of such code blocks, mutual exclusion locks are used.

Most kernel data structures and other shared data elements such as shared buffers and device registers are protected from concurrent access through appropriate 
exclusion-locking interfaces offered by the kernel. 
 
Spinlocks
--------
Spinlocks are one of the simplest and lightweight mutual exclusion mechanisms widely implemented by most concurrent programming environments. 
A spinlock implementation defines a lock structure and operations that manipulate the lock structure. 
The lock structure primarily hosts an atomic lock counter among other elements, and operations interfaces include:
-An initializer routine, that initializes a spinlock instance to the default (unlock) state
-A lock routine, that attempts to acquire spinlock by altering the state of the lock counter atomically
-An unlock routine, that releases the spinlock by altering counter into unlock state

When a caller context attempts to acquire spinlock while it is locked (or held by another context), the lock function iteratively polls or spins for the lock 
until available, causing the caller context to hog the CPU until lock is acquired. 
It is therefore advised to ensure that code within critical sections is atomic or non-blocking, so that lock can be held for a short, deterministic duration.

Spinlocks are built around processor-specific atomic operations; the architecture branch of the kernel implements core spinlock operations (assembly programmed). 
The kernel wraps the architecture-specific implementation through a generic platform-neutral interface that is directly usable by kernel service;

Generic spinlock interfaces can be found in the kernel header <linux/spinlock.h> while architecture-specific definitions are part of <asm/spinlock.h>.

The following code sample shows the usage of a basic spinlock interface:

DEFINE_SPINLOCK(s_lock);
spin_lock(&s_lock);
/* critical region ... */
spin_unlock(&s_lock);
 
Kernel code implements two variants of spinlock operations; one suitable for SMP platforms and the other for uniprocessor platforms.

<include/linux/spinlock.h> contains generic spinlock/rwlock declarations.

The generic kernel header <linux/spinlock.h> contains a conditional directive to decide on the appropriate (SMP or UP) API to pull.

The raw_spin_lock()andraw_spin_unlock()macros dynamically expand to the appropriate version of spinlock operations based on the type of platform (SMP or UP) 
chosen in the build configuration. 
For SMP platforms, raw_spin_lock() expands to the __raw_spin_lock() operation implemented in the kernel source file kernel/locking/spinlock.c.
 


