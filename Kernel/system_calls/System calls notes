
System calls
--------------

- it provides an abstracted hardware interface for user-space.
- system calls ensure system security and stability.
- a single common layer between user-space and the rest of the system allows for the virtualized system provided to processes.



- applications are programmed against an Application Programming Interface (API) implemented in user-space, not directly to system calls.
- An API defines a set of programming interfaces used by applications.
- The same API can exist on multiple systems and provide the same interface to applications while the implementation of the API itself can differ greatly from system to system.

-Eg:
	printf() in application -----> printf() in C library ----> write() in C library ----> write() system call

- application programming interfaces in the Unix world is based on the POSIX standard.


- There are about 335 system calls are on x86. (Each architecture is allowed to define unique system
calls.) Although not all operating systems publish their exact system calls, some operating systems are
estimated to have more than one thousand.


- The system call interface in Linux, as with most Unix systems, is provided in part by
the C library.The C library implements the main API on Unix systems, including the
standard C library and the system call interface.

- The C library additionally provides the majority of the POSIX API.



- System calls (often called syscalls in Linux) are typically accessed via function calls defined
in the C library.

- They can define zero, one, or more arguments (inputs) and might result
in one or more side effects, 3 for example writing to a file or copying some data into a
provided pointer.

- System calls also provide a return value of type long 4 that signifies success or error—usually,
although not always, a negative return value denotes an error.

- A return value of zero is usually (but again not always) a sign of success.The C library, when
a system call returns an error, writes a special error code into the global "errno" variable.

- This variable can be translated into human-readable errors via library functions such as
perror() .

- system calls have a defined behavior. For example, the system call getpid() is
defined to return an integer that is the current process’s PID.The implementation of this
syscall in the kernel is simple:

"""
SYSCALL_DEFINE0(getpid)
{
return task_tgid_vnr(current); // returns current->tgid
}

"""


- "SYSCALL_DEFINE0" is simply a macro that defines a system call with no parameters
(hence the 0).The expanded code looks like this:
"""
asmlinkage long sys_getpid(void)
"""

- the asmlinkage modifier on the function definition is a directive to tell the compiler to look only on the stack for
this function’s arguments.This is a required modifier for all system calls.

- The function returns a long . For compatibility between 32- and 64-bit systems, system calls
defined to return an int in user-space return a long in the kernel.

- System call bar() is implemented in the kernel as function sys_bar() .



- In Linux, each system call is assigned a syscall number.This is a unique number that is used
to reference a specific system call.

- When a user-space process executes a system call, the
syscall number identifies which syscall was executed; the process does not refer to the
syscall by name.

- Linux provides a “not implemented” system call,
sys_ni_syscall() , which does nothing except return -ENOSYS , the error corresponding
to an invalid system call. This function is used to “plug the hole” in the rare event that a
syscall is removed or otherwise made unavailable.

- The kernel keeps a list of all registered system calls in the system call table, stored in
"sys_call_table".


- user-space applications must somehow signal to the kernel that they want to
execute a system call and have the system switch to kernel mode, where the system call
can be executed in kernel-space by the kernel on behalf of the application.

- The mechanism to signal the kernel is a software interrupt: Incur an exception, and
the system will switch to kernel mode and execute the exception handler.The exception
handler, in this case, is actually the system call handler.



x86
----

- The defined software interrupt on
x86 is interrupt number 128, which is incurred via the "int $0x80" instruction. It triggers
a switch to kernel mode and the execution of exception vector 128, which is the system
call handler.

- It is
architecture-dependent; on x86-64 it is implemented in assembly in entry_64.S .

"""

/arch/x86/entry/entry_64.S

/*
 * 64-bit SYSCALL instruction entry. Up to 6 arguments in registers.
 *
 * This is the only entry point used for 64-bit system calls.  The
 * hardware interface is reasonably well designed and the register to
 * argument mapping Linux uses fits well with the registers that are
 * available when SYSCALL is used.
 *
 * SYSCALL instructions can be found inlined in libc implementations as
 * well as some other programs and libraries.  There are also a handful
 * of SYSCALL instructions in the vDSO used, for example, as a
 * clock_gettimeofday fallback.
 *
 * 64-bit SYSCALL saves rip to rcx, clears rflags.RF, then saves rflags to r11,
 * then loads new ss, cs, and rip from previously programmed MSRs.
 * rflags gets masked by a value from another MSR (so CLD and CLAC
 * are not needed). SYSCALL does not save anything on the stack
 * and does not change rsp.
 *
 * Registers on entry:
 * rax  system call number
 * rcx  return address
 * r11  saved rflags (note: r11 is callee-clobbered register in C ABI)
 * rdi  arg0
 * rsi  arg1
 * rdx  arg2
 * r10  arg3 (needs to be moved to rcx to conform to C ABI)
 * r8   arg4
 * r9   arg5
 * (note: r12-r15, rbp, rbx are callee-preserved in C ABI)
 *
 * Only called from user space.
 *
 * When user can change pt_regs->foo always force IRET. That is because
 * it deals with uncanonical addresses better. SYSRET has trouble
 * with them due to bugs in both AMD and Intel CPUs.
 */

ENTRY(entry_SYSCALL_64)
	UNWIND_HINT_EMPTY
	/*
	 * Interrupts are off on entry.
	 * We do not frame this tiny irq-off block with TRACE_IRQS_OFF/ON,
	 * it is too small to ever cause noticeable irq latency.
	 */

	swapgs
	/* tss.sp2 is scratch space. */
	movq	%rsp, PER_CPU_VAR(cpu_tss_rw + TSS_sp2)
	SWITCH_TO_KERNEL_CR3 scratch_reg=%rsp
	movq	PER_CPU_VAR(cpu_current_top_of_stack), %rsp

	/* Construct struct pt_regs on stack */
	pushq	$__USER_DS				/* pt_regs->ss */
	pushq	PER_CPU_VAR(cpu_tss_rw + TSS_sp2)	/* pt_regs->sp */
	pushq	%r11					/* pt_regs->flags */
	pushq	$__USER_CS				/* pt_regs->cs */
	pushq	%rcx					/* pt_regs->ip */
	...
	...

"""

- Recently, x86 processors added a feature known as sysenter.This feature provides a faster,
more specialized way of trapping into a kernel to execute a system call than using the int
interrupt instruction.


- The system call number must be
passed into the kernel. On x86, the syscall number is fed to the kernel via the eax regis-
ter. Before causing the trap into the kernel, user-space sticks in eax the number corre-
sponding to the desired system call.The system call handler then reads the value from
eax.

- In addition to the system call number, most syscalls require that one or more parameters
be passed to them. Somehow, user-space must relay the parameters to the kernel during
the trap.The easiest way to do this is via the same means that the syscall number is passed:
The parameters are stored in registers. On x86-32, the registers ebx , ecx , edx , esi , and
edi contain, in order, the first five arguments. In the unlikely case of six or more argu-
ments, a single register is used to hold a pointer to user-space where all the parameters
are stored.

- The return value is sent to user-space also via register. On x86, it is written into the
eax register.



Implementing system calls
-----------------------------
- Every parameter must be
checked to ensure it is not just valid and legal, but correct.

- Processes must not ask the kernel to access resources to which the process does not have access.

- One of the most important checks is the validity of any pointers that the user provides.

- Before following a pointer
into user-space, the system must ensure that
	1) The pointer points to a region of memory in user-space. Processes must not be able
	to trick the kernel into reading data in kernel-space on their behalf.

	2) The pointer points to a region of memory in the process’s address space.The
	process must not be able to trick the kernel into reading someone else’s data.

	3) If reading, the memory is marked readable. If writing, the memory is marked
	writable. If executing, the memory is marked executable.The process must not be
	able to bypass memory access restrictions.


- For writing into user-space, the method "copy_to_user()" is provided. It takes three
parameters.The first is the destination memory address in the process’s address space.The
second is the source pointer in kernel-space. Finally, the third argument is the size in bytes
of the data to copy.

"""
	unsigned long copy_to_user(void __user * to, const void * from, unsigned long n);
"""


- For reading from user-space, the method copy_from_user() is analogous to
copy_to_user() .The function reads from the second parameter into the first parameter
the number of bytes specified in the third parameter.

"""
	unsigned long copy_from_user(void * to, const void __user * from, unsigned long n);
"""

- Both of these functions return the number of bytes they failed to copy on error. On
success, they return zero. It is standard for the syscall to return -EFAULT in the case of such
an error.


- Both copy_to_user() and copy_from_user() may block. In
that case, the process sleeps until the page fault handler can bring the page from the swap
file on disk into physical memory.

- A call to capable() with a valid capabilities flag returns nonzero if the caller holds the specified
capability and zero otherwise. For example, capable(CAP_SYS_NICE) checks whether the
caller has the ability to modify nice values of other processes.


- ensure that system calls are reentrant.

- After the system call is written, it is trivial to register it as an official system call:
	1. Add an entry to the end of the system call table.This needs to be done for each
	architecture that supports the system call. The position of the syscall in the table,
	starting at zero, is its system call number.

	2. For each supported architecture, define the syscall number in <asm/unistd.h> .

	3. Compile the syscall into the kernel image (as opposed to compiling as a module).
	This can be as simple as putting the system call in a relevant file in kernel/ , such as
	sys.c , which is home to miscellaneous system calls.

x86 syscall table - arch/x86/entry/syscalls/syscall_64.tbl
arm syscall table - arch/arm/tools/syscall.tbl
arm64 syscall table - arch/arm64/include/asm/unistd32.h


- For each architecture you want to support, the system
call must be added to the architecture’s system call table.


System call definitions(v5.14)

Folder/Subsystem	Syscalls defined
----------------	-----------------

block							ioprio_set
									ioprio_get

fs								select
									pselect6
									pselect6_time32
									old_select
									poll
									ppoll
									ppoll_time32
									io_setup
									io_destroy
									io_submit
									io_cancel
									io_getevents
									io_pgetevents
									io_pgetevents_time32
									io_getevents_time32
									truncate
									ftruncate
									truncate64
									ftruncate64
									fallocate
									faccessat
									faccessat2
									access
									chdir
									fchdir
									chroot
									fchmod
									fchmodat
									chmod
									fchownat
									chown
									lchown
									fchown
									open
									openat
									openat2
									creat
									close
									close_range
									vhangup)
									eventfd2
									eventfd
									stat
									lstat
									fstat
									newstat
									newlstat
									newfstatat
									newfstat
									readlinkat
									readlink
									stat64
									lstat64
									fstat64
									fstatat64
									statx
									old_readdir
									getdents
									getdents64
									utimensat
									futimesat
									utimes
									utime
									utime32
									utimensat_time32
									futimesat_time32
									utimes_time32
									io_uring_enter
									io_uring_setup
									io_uring_register
									statfs
									statfs64
									fstatfs
									fstatfs64
									ustat
									pipe2
									pipe
									flock
									quotactl
									quotactl_fd
									uselib
									execve
									execveat
									lseek
									llseek
									read
									write
									pread64
									pwrite64
									readv
									writev
									preadv
									preadv2
									pwritev
									pwritev2
									sendfile
									sendfile64
									copy_file_range
									timerfd_create
									timerfd_settime
									timerfd_gettime
									timerfd_settime32
									timerfd_gettime32
									sync)
									syncfs
									fsync
									fdatasync
									sync_file_range
									sync_file_range2
									ioctl
									fsopen
									fspick
									fsconfig
									dup3
									dup2
									dup
									inotify_init1
									inotify_init)
									inotify_add_watch
									inotify_rm_watch
									fanotify_init
									fanotify_mark
									epoll_create1
									epoll_create
									epoll_ctl
									epoll_wait
									epoll_pwait
									epoll_pwait2
									fcntl
									fcntl64
									userfaultfd
									vmsplice
									splice
									tee
									getcwd
									signalfd4
									signalfd
									mknodat
									mknod
									mkdirat
									mkdir
									rmdir
									unlinkat
									unlink
									symlinkat
									symlink
									linkat
									link
									renameat2
									renameat
									rename
									name_to_handle_at
									open_by_handle_at
									setxattr
									lsetxattr
									fsetxattr
									getxattr
									lgetxattr
									fgetxattr
									listxattr
									llistxattr
									flistxattr
									removexattr
									lremovexattr
									fremovexattr
									sysfs
									umount
									oldumount
									open_tree
									mount
									fsmount
									move_mount
									pivot_root
									mount_setattr


ipc								msgget
									msgctl
									old_msgctl
									msgsnd
									msgrcv
									semget
									semctl
									old_semctl
									semtimedop
									semtimedop_time32
									semop
									shmget
									shmctl
									old_shmctl
									shmat
									shmdt
									mq_open
									mq_unlink
									mq_timedsend
									mq_timedreceive
									mq_notify
									mq_getsetattr
									mq_timedsend_time32
									mq_timedreceive_time32
									ipc


kernel 						delete_module
									init_module
									finit_module
									exit
									exit_group
									waitid
									wait4
									waitpid
									capget
									capset
									setpriority
									getpriority
									setregid
									setgid
									setreuid
									setuid
									setresuid
									getresuid
									setresgid
									getresgid
									setfsuid
									setfsgid
									getpid)
									gettid)
									getppid)
									getuid)
									geteuid)
									getgid)
									getegid)
									times
									setpgid
									getpgid
									getpgrp)
									getsid
									setsid)
									newuname
									uname
									olduname
									sethostname
									gethostname
									setdomainname
									getrlimit
									old_getrlimit
									prlimit64
									setrlimit
									getrusage
									umask
									prctl
									getcpu
									sysinfo
									syslog
									rseq
									time
									stime
									time32
									stime32
									gettimeofday
									settimeofday
									adjtimex
									adjtimex_time32
									clock_settime
									clock_gettime
									clock_getres
									clock_nanosleep
									clock_settime32
									clock_gettime32
									clock_getres_time32
									clock_nanosleep_time32
									timer_create
									timer_gettime
									timer_gettime32
									timer_getoverrun
									timer_settime
									timer_settime32
									timer_delete
									clock_settime
									clock_gettime
									clock_adjtime
									clock_getres
									clock_settime32
									clock_gettime32
									clock_adjtime32
									clock_getres_time32
									clock_nanosleep
									clock_nanosleep_time32
									nanosleep
									nanosleep_time32
									getitimer
									alarm
									setitimer
									bpf
									set_tid_address
									fork)
									vfork)
									clone
									clone
									clone
									clone
									clone3
									unshare
									seccomp
									getgroups
									setgroups
									perf_event_open
									chown16
									lchown16
									fchown16
									setregid16
									setgid16
									setreuid16
									setuid16
									setresuid16
									getresuid16
									setresgid16
									getresgid16
									setfsuid16
									setfsgid16
									getgroups16
									setgroups16
									getuid16)
									geteuid16)
									getgid16)
									getegid16)
									kexec_file_load
									pidfd_open
									pidfd_getfd
									kexec_load
									nice
									sched_setscheduler
									sched_setparam
									sched_setattr
									sched_getscheduler
									sched_getparam
									sched_getattr
									sched_setaffinity
									sched_getaffinity
									sched_yield)
									sched_get_priority_max
									sched_get_priority_min
									sched_rr_get_interval
									sched_rr_get_interval_time32
									membarrier
									ptrace
									set_robust_list
									get_robust_list
									futex
									futex_time32
									setns
									kcmp
									reboot
									acct
									restart_syscall)
									rt_sigprocmask
									rt_sigpending
									rt_sigtimedwait
									rt_sigtimedwait_time32
									kill
									pidfd_send_signal
									tgkill
									tkill
									rt_sigqueueinfo
									rt_tgsigqueueinfo
									sigaltstack
									sigpending
									sigprocmask
									rt_sigaction
									sigaction
									sgetmask)
									ssetmask
									signal
									pause)
									rt_sigsuspend
									sigsuspend
									sigsuspend
									personality

mm								process_mrelease
									mincore
									brk
									mmap_pgoff
									old_mmap
									munmap
									mremap
									mlock
									mlock2
									munlock
									mlockall
									munlockall)
									msync
									memfd_create
									mprotect
									pkey_mprotect
									pkey_alloc
									pkey_free
									brk
									mmap_pgoff
									old_mmap
									munmap
									remap_file_pages
									madvise
									process_madvise
									fadvise64_64
									fadvise64
									swapoff
									swapon
									mbind
									set_mempolicy
									migrate_pages
									get_mempolicy
									process_vm_readv
									process_vm_writev
									readahead
									move_pages
									mremap
									memfd_secret

net 							socket
									socketpair
									bind
									listen
									accept4
									accept
									connect
									getsockname
									getpeername
									sendto
									send
									recvfrom
									recv
									setsockopt
									getsockopt
									shutdown
									sendmsg
									sendmmsg
									recvmsg
									recvmmsg
									recvmmsg_time32
									socketcall

security					add_key
									request_key
									keyctl
									landlock_create_ruleset
									landlock_add_rule
									landlock_restrict_self

738 - 288 = 450

400+ system Syscalls other than COMPAT Syscalls


Accessing syscalls from userspace

- Linux provides a set of macros for wrapping access to system calls. It sets
up the register contents and issues the trap instructions.
- These macros are named _syscalln() , where n is between 0 and 6. The number
corresponds to the number of parameters passed into the syscall because the
macro needs to know how many parameters to expect and, consequently, push into
registers.

"""
long open(const char *filename, int flags, int mode)
"""

The syscall macro to use this system call without explicit library support would
be:
"""
#define __NR_open 5
_syscall3(long, open, const char *, filename, int, flags, int, mode)
"""

- Then, the application can simply call open() .

- For each macro, there are 2 + 2 × n parameters.The first parameter corresponds to the
return type of the syscall.The second is the name of the system call. Next follows the
type and name for each parameter in order of the system call.The __NR_open define is in
<asm/unistd.h> ; it is the system call number.The _syscall3 macro expands into a C
function with inline assembly;


Eg:
"""
#define __NR_foo 283
__syscall0(long, foo)

int main ()
{
	long stack_size;
	stack_size = foo ();
	printf (“The kernel stack size is %ld\n”, stack_size);
	return 0;
}
"""


The pros of implementing a new interface as a syscall are as follows:
- System calls are simple to implement and easy to use.
- System call performance on Linux is fast.

The cons:

- You need a syscall number, which needs to be officially assigned to you.
- After the system call is in a stable series kernel, it is written in stone.The interface
cannot change without breaking user-space applications.
- Each architecture needs to separately register the system call and support it.
- System calls are not easily used from scripts and cannot be accessed directly from
the filesystem.
- Because you need an assigned syscall number, it is hard to maintain and use a sys-
tem call outside of the master kernel tree.
- For simple exchanges of information, a system call is overkill.

The alternatives:

- Implement a device node and read() and write() to it. Use ioctl() to manipu-
late specific settings or retrieve specific information.
- Certain interfaces, such as semaphores, can be represented as file descriptors and
manipulated as such.
- Add the information as a file to the appropriate location in sysfs.
