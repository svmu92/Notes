LTP-DDT
----------

- DDT stands for Device Driver Test

- LTP-DDT extends LTP's core kernel tests to validate kernel drivers

- contains 100s of tests that validate functionality and performance of device drivers

- uses LTP's test infra such as ltp-pan, runltp and same directory structure and testcase definition format


download - git clone http://arago-project.org/git/projects/test-automation/ltp-ddt.git

- mainly for embedded devices, so we usually cross-compile

- ususally use Linaro or Arago toolchain

- Goals of LTP-DDT:
	- validate the functionality, performance and stability of device drivers on embedded platforms
	- validate performance and stability of the whole embedded system
	- maximize use of open source software and contribute to improve it
	- maximize code reuse across different platforms (atomic scripts and test scripts are reused and parameters are adjusted on the fly)
	- make it easy to support new embedded platforms
	

Enhancements over LTP
	- use of platform files to identify platform hardware and software features
	- default testcases are overriden based on platform
	- test cases are filtered based on the test requirements and the platform
	- test scenario files are annotated with following annotations-  @name, @desc, @requires and @setup_requires
		two additional default scenario group - default-ddt and k3-ip
	- ddt specific folders - <testcases-root>/ddt/ and <runtest>/ddt/
	

Running tests
	- use runltp script
	- -P option to pass the platform
	eg: ./runtlp -P am180x-evm -f ddt/lmbench
		pltform must exist in platforms/ directory
		

- While running tests on the embedded platform, corresponding driver files must be present.


- script install_modules.sh will try to install/insert module corresponding to the device that is passed to it as an argument.


Runtest format guidelines:
	- Format of testcase - <TAG> <COMMANDS>
	- Naming convention of <TAG> - <AREA>_<SCOPE>_<TYPE>_<OPT_ID>
		eg: NAND_S__FUNC_RW_8K, GPIO_S_FUNC_DIR_IN_ALL_BLANK
	- <SCOPE> - used to indicate the amount of time required to run the tests
		XS - 1 min
		S  - 10 mins
		M  - 1 hour
		L  - 8 hours
		XL - 24 hours
		XXL- 1 week
	- TYPE
		FUNC
		PERF
		STRESS
		USECASE
		COMPLIANCE
		MODULAR
		DOC

	- <COMMANDS> - list of one or more shell commands separated by semicolon (;)


Adding new testcases

- need to add in two directories
	- testcases/ddt/
	- runtest/ddt/

- new C file - add in testcases/ddt/<new folder>
- new script file - add in testcases/ddt/scripts/

- Try to use /sys/ and /proc/ information rather than hardcoding values for the platform
- When not possible to determine values dynamically, define default values and provide appropriate override on either ARCH, DRIVER, SOC and MACHINE variables
- Use Template script to write new test scripts - testcases/ddt/scripts/TEMPLATE



